openapi: 3.0.1
info:
  title: Prolific API for researchers
  description: ""
  contact:
    name: Prolific's Community
    url: https://docs.prolific.com/docs/api-docs/public/
  license:
    name: Apache 2.0
    url: https://spdx.org/licenses/Apache-2.0.html
  version: "1.0"
servers:
  - url: https://api.prolific.com
    description: Production
tags:
  - name: Introduction
    description: |-
      With Prolific's API, you can recruit high-quality participants and manage your research workflows programmatically through your own app.

      - **Study** - Create, update, and publish your Prolific studies
      - **Submissions** - Approve and reject submissions programmatically
      - **Bonus** - Pay a bonus to high-performing submissions
      - **Messages** - Send and receive participant messages
      - **Workspaces** - Collaborate with your teammates and organise research
      - **Survey** - Create quick prescreening studies
      - **Participant groups** - Manage lists of participants that you can use to launch studies
      - **Hooks** - Be notified of certain events happening on your studies

      ![Prolific overview](https://assets.prolific.com/assets/img/api/overview.jpg)

      **Tip**: If you are not ready for an API integration you can simply use our Web application to create studies to recruit participants and redirect them to your platform by providing a [Study URL](https://researcher-help.prolific.com/hc/en-gb/articles/360009223173-#heading-3).

      **Not supported**: The Prolific API does **not** support account management such as topping up your account or user management. Such features are only available in our web application. New or advanced features available in the web application may also not be available. If there are any capabilities you need that are not documented, please contact our [support team](https://researcher-help.prolific.com/hc/en-gb/requests/new).

      ## Basic

      The API follows the standard REST approach of

      - URLs entry point is `https://api.prolific.com/api/`.

      - URLs are versioned `https://api.prolific.com/api/v1/endpoints/`, so we might do a v2 version in the future.

      - We strongly aim for backward compatibility for the documented endpoints.

      There are two URLs per resource and use HTTP methods to operate on resources.

      - A collection URL `/api/v1/endpoints/`. The collection endpoint is used to retrieve a list of resources (GET) and create a new resource (POST)

      - An element URL `/api/v1/endpoints/<id>/`. The element URL is used to retrieve a single resource (GET), apply a delta (PATCH), replace existing resource (PUT) and delete (soft or hard) a resource (DELETE).

      **Optional request header Referer**

      For example:

      - Referer: https://yourlibrary.org/v3.1/
      - Referer: https://yourapp.com/connect/prolific

      If you are providing a library or framework to be used by multiple accounts, sending **Referer**
      with your requests can help us identify issues with libraries and we can give a better support for those accounts.
      Including the version of the library in the referrer url if there are multiple versions is welcomed.

      If you are using the API from your app, you can include the **Referer** with the full url.

      ## Authentication

      The Prolific API uses **API tokens** to authenticate requests. You can view and manage your API tokens in **Settings > API Tokens**.

      The Prolific API tokens have no expiry date and are best used for server-to-server communication only. We advise rotating API tokens as required.

      We do not recommend you integrate with the Prolific API directly from your web application. This would expose your tokens publically.

      ## Versioning and stability

      We strongly aim for backward compatibility for the documented endpoints. If backwards-incompatible changes are made, we will aim to release a new version.

      - URLs’ entry point is `https://api.prolific.com/api/`.
      - URLs are versioned `https://api.prolific.com/api/v1/endpoints/`

      Our web application uses the same API and applies the same high-security standards.

      ## Rate limits and API status

      The Prolific API has the same rate limit and availability as our web application.
      You can subscribe to our status page [https://status.prolific.com](https://status.prolific.com).

      ## Account balance

      Publishing studies requires an available balance in your account. You can only check your balance on our web application.

      ## API support

      If you require help you can [submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to our support team.

  - name: Errors
    description: |-

      The Prolific API uses standard HTTP response codes to indicate the success or failure of the request. Codes follow this pattern:

      - 2xx codes indicate success.
      - 4xx codes indicate a request that failed given the information provided (e.g. a required parameter was omitted).
      - 5xx codes indicate an error with Prolific's platform.
      ## Error codes
      | Code | Description                                                                                                                                  |
      | ---- | -------------------------------------------------------------------------------------------------------------------------------------------- |
      | 400  | Bad Request - The request was unacceptable. Check the response for more details.                                                             |
      | 401  | Unauthorized - No valid token was provided.                                                                                                  |
      | 403  | Forbidden - You do not have access to this resource.                                                                                         |
      | 404  | Not Found - The resource does not exist.                                                                                                     |
      | 405  | Method Not Allowed - You tried to access a resource with an invalid method.                                                                  |
      | 422  | Unprocessable entity - A validation error on a well-formed request. Check the response for more details.                                     |
      | 429  | Too many requests - You have sent too many requests (either in general, for a resource or for a related resource) in a given amount of time. |

      If the error is unclear or none of the above applies, please [submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to our support team with the request body.

  - name: Users
    description: |-
      A user is associated with an account, their credentials and their API
      token.

  - name: Taskflow
    externalDocs:
      description: To get started with Taskflow, see the Create Study Documentation
      url: https://docs.prolific.com/docs/api-docs/public/studies#tag/Studies/operation/CreateStudy
    description: |-
      Taskflow is designed to facilitate the creation and management of single studies with varied configurations. By utilizing Taskflow, you can seamlessly implement A/B testing with different external URLs and distribution strategies, ensuring comprehensive data collection and analysis from your participants.

      - **Key Features**:
        - **Flexible Study Creation:** Easily set up studies with multiple variations in external URLs, enabling targeted testing and comparison.
        - **A/B Testing:** Conduct robust A/B testing to evaluate different versions of your study, allowing for precise measurement of participant responses and behaviors.
        - **Granular Distribution:** Fine grained control over the distribution of your URLs to a subsection of participants.
        - **Task Assignment Efficiency:** Ideal for scenarios where you need to assign small numbers of participants to specific unique tasks. This streamlines the management process by handling a single study rather than managing multiple small studies.

      Below is an example of how Taskflow reduces the study management complexity:
      ![Taskflow Example](https://assets.prolific.com/assets/img/api/taskflow-example.png)

  - name: Studies
    description: |-
      <div style="padding: 15px; margin-bottom: 20px; border: 1px solid transparent; border-radius: 4px; color: #a94442; background-color: #f2dede; border-color: #ebccd1; display:flex; flex-direction:column;">
        <div style="padding-top: 10px">
          <span style="font-size: x-large;"><strong>Important<strong></span>
        </div>
        <div style="padding-top: 10px">
          The Studies API has rate limits in place to prevent researchers from launching too many studies with low numbers of participants.<br>
        </div>
        <div style="padding-top: 10px">
          If your study URLs each represent a variant of the same task, with a specified number of participants accessing each variant, please consider using our Taskflow product, which is tailored for this and does not have a publishing limit.
        </div>
        <a href="https://researcher-help.prolific.com/hc/en-gb/articles/13888500244380-Taskflow-AI-Dataset-Annotation" style="margin-top:10px; display: inline-block; font-weight: 400; color: #fff; text-align: center; vertical-align: middle; user-select: none; background-color: #007bff; border: 1px solid #007bff; padding: .375rem .75rem; font-size: 1rem; line-height: 1.5; border-radius: .25rem; transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;">
          Take me to the taskflow documentation
        </a>
      </div>

      To recruit participants for your research, you create a draft study with your audience filters and cost and then publish the study to start recruiting.

      This is a two step process because publishing a study to participants requires many different and complex steps.

      - Checking if your account has sufficient balance to pay participants
      - Locking the amount required
      - Launching our algorithm to find the best suitable participants for you
      - Sending emails and more

      By separating it into 2 steps, researchers can be confident that their study is created, no information is lost and it can be updated before publishing.

      Related guide: [Quick guide to using Prolific](https://researcher-help.prolific.com/hc/en-gb/articles/360034677314-Quick-guide-to-using-Prolific)
      ![Study flow](https://assets.prolific.com/assets/img/api/study.jpg)

      ## The study object

      **Important** **Attributes**

      ---

      **status**

      The status of a study can transition to one of the following.

      - **UNPUBLISHED** - When a study is created, it is in a draft format.
      - **ACTIVE** - Study is published to participants.
      - **SCHEDULED** - Study is scheduled to be published at a specific date. Study is ‘ACTIVE’ when published.
      - **PAUSED** - Study is paused, participants are not shown the study and can not make submissions.
      - **AWAITING REVIEW** - All participants submissions are completed and not all have been reviewed yet.
      - **COMPLETED** - You have approved all participant submissions required for your study. If you have rejected one or more submissions, the study goes back to 'AWAITING REVIEW' until the number of accepted submissions has been reached.

      ---

      **external_study_url (required)**

      The external study URL of your study that you want participants to be direct to. The URL can be customized to add information to match participants in your survey. You can add query parameters with the following placeholders.

      - `{{%PROLIFIC_PID%}}` -> Participant Id
      - `{{%STUDY_ID%}}` -> This study Id
      - `{{%SESSION_ID%}}` -> The session Id

      For example, you can define `external_study_url` to be '[https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}'](https://eggs-experriment.com/?participant=%7B%7B%PROLIFIC_PID%%7D%7D%27).

      When participants access your study, they start a submission with their unique ID, allowing you to match their responses. You can approve or reject their submission, pay a bonus, or send a message against the unique ID.

      ---

      **completion_codes (required)**

      Completion codes are the mechanism used to ensure your participants have completed the study as designed.

      The can also be used to segregate participants according to their answers in your study and perform some automated actions on study completion.

      The completion code is a **required** field with a **random set of letters and numbers**. It is not unique and can be the same for every participant or different ones based on your workflows.

      We recommend that at the end of the experiment or survey, the participant is directed back to the URL [https://app.prolific.com/submissions/complete?cc={code}](https://app.prolific.com/submissions/complete?cc=%7Bcode%7D).

      You can have as many different codes as you like for any study. You can name these codes to make it easier to understand the intent of each code.

      You can also assign any number of automated actions to be completed when a submission is completed with that code.

      Actions available upon completion include:
      - Leaving the submission for manual review.
      - Automatically approving the submission.
      - Requesting that the submission is returned (with a reason for your request).
      - Adding the participant to a participant group.
      - Removing the participant from a participant group.

      ---

      **filters (required)**

      Filters allow you to define participants criteria such as age, gender and country. Learn how to set them under [Requirements](https://docs.prolific.com/docs/api-docs/public/#tag/Filters).

      Related guide: [Setting up a study on Prolific](https://researcher-help.prolific.com/hc/en-gb/articles/4407456015250)

      ---

      **estimated_completion_time (required)**

      This is your estimated duration of how long it would take for participants to complete your research.

      If you have run the same or a very similar study before, you will have the data to best estimate the completion time. If you do not, we recommend publishing your study to a few participants to identify the average completion time, before launching it to all participants.

      **Correct a published study of the estimated time is too low**

      If you have estimated the completion time too low and paid participants too little, you can pause your study and adjust the reward for already approved submissions via our web application before continuing to recruit participants with the increased reward.

      1. Pause your study using the PAUSE [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post).
      2. Go to the submissions page (web application) and adjust payments for already approved submissions. A warning message is shown if participants are underpaid.
      3. Update your study and activate it again.

      **Correct a published study if the estimated time is too high**

      If you estimated the time as too high and overpaid participants, you can ask the participants to return their studies voluntarily. They will not get paid, however, you should pay them the amount they have spent on your study manually.

      1. First, stop your study using the STOP [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post).
      2. Message participants to RETURN their submissions voluntarily. Many will do, but you should pay them for their participation time via the Web application or bonus API.
      3. You can contact our support team for further help.
      4. Update your study cost and update your study to ACTIVE.

      ---

      **rewards (required)**

      The `reward` is the total reward you pay a participant in cents (according to the currency of your account) when you approve a completed submission. We display the reward per hour in our web application by using the reward and estimated time.

  - name: Study Collections
    description: |-
      Study collections allow you to group studies together and automates creating complex interactions
      between studies. Initially, you can create mutually exclusive study collections. This allows you
      to:

      - Create a study collection.
      - Add studies you have created using the study API to the collection.
      - Publish the studies together.

      When your study collection is published, participants will be randomly assigned to one of the
      studies in your collection for which they are eligible. Once they have taken that study they will
      not be eligible to take any other study in the collection.
  - name: Filters
    description: |-

      ## Filters Overview

      Filters allow you to restrict access to your study based on participant demographics and attributes.

      You can save combinations of filters, known as filter sets, to re-use across studies.
      These are useful if you're running multiple studies with the same audience filters.

      There are two types of filters:
      - A select type filter allows you to select one or more options from a list of pre-defined choices.
      - A range type filter allows you to select an upper and / or a lower bound for a given participant attribute.

      To understand which filters are available to use, perform a GET request to the [filters list endpoint](#tag/Filters/paths/~1api~1v1~1filters~1/get).
      For each filter a `type` and a `data_type` attribute will be returned.

      ![The filters flow](https://assets.prolific.com/assets/img/api/filters.png)

      To use filters in a filter set, [create a filter set](#tag/Filter-Sets/paths/~1api~1v1~1filter-sets~1/post) with the correct filters selected, then [apply it to your study](#tag/Studies/paths/~1api~1v1~1studies~1/post) using the `filter_set_id` parameter.

      To use filters directly on a study, apply the filters using the `filters` parameter directly in the [study
      creation endpoint](#tag/Studies/paths/~1api~1v1~1studies~1/post).

      For example, if you wanted to recruit using the 'handedness' filter, you would see a filter in the filters `GET` request which looks like this:

      ```json
      {
        "filter_id": "handedness",
        "title": "Handedness",
        "description": "",
        "question": "Are you left or right handed?",
        "type": "select",
        "data_type": "ChoiceID",
        "choices": {
            "0": "Left",
            "1": "Right",
            "2": "Ambidextrous",
          },
      }
      ```

      To apply this filter to a filterset or a study, your payload would look like this:

      ```json
      {
        "filter_id": "handedness",
        "selected_values": ["0", "1"],
      }
      ```

      This would result in your study recruiting from all participants who answered that they are either left or right-handed, and would exclude those who answered that they were ambidextrous.

      Alternatively, if you wished to recruit using an age range filter, you would see this in your `GET` response:

      ```json
      {
        "filter_id": "age",
        "title": "Age",
        "description": "Participants were asked their date of birth. Please specify a current age range between min and max.",
        "question": "What is your date of birth?",
        "type": "range",
        "data_type": "integer",
        "min": 18,
        "max": 100,
      }
      ```

      To apply this filter to a filterset or a study, your payload would look like this:

      ```json
      {
        "filter_id": "age",
        "selected_range": {
          "lower": 18,
          "upper": 50,
        }
      }
      ```

      This would result in your study recruiting from all participants who at the time of publish were between 18 and 50 years old, inclusive.

      It is not necessary to always provide both a lower and upper bound on a range filter. For example, if you simply wished to recruit all participants over the age of 50, you could set this filter as follows:

        ```json
        {
          "filter_id": "age",
          "selected_range": {
             "lower": 50,
          }
        }
        ```

      ## Study Distribution (Quotas) with Filters
      With Prolific, you can create a study in which you can balance your sample based on a given set of eligibility
      criteria.

      For example, you may wish for your responses to be 50% male and 50% female participants, or 30% left handed and
      70% right handed participants.

      To do this, you would add a `weightings` argument to the filter.
      Weightings are expressed as ratios. Taking the 'handedness' example from above, if you wanted to distribute your
      study to 50% left handed participants and 50% right handed participants, you would use the following weighting:

      ```json
      {
          "filter_id": "handedness",
          "selected_values": ["0", "1"],
          "weightings": {
            "0": 1,
            "1": 1,
          },
      }
      ```

      Splitting your study into equal thirds for each response, your payload would look like this:

      ```json
      {
           "filter_id": "handedness",
           "selected_values": ["0", "1", "2"],
           "weightings": {
              "0": 1,
              "1": 1,
              "2": 1,
           },
      }
      ```

      Percentage integer values also work here, so if you wanted to distribute your study to 25% left handed and 75%
      right handed participants, you could use the following weighting:

      ```json
      {
          "filter_id": "handedness",
          "selected_values": ["0", "1"],
          "weightings": {
              "0": 25,
              "1": 75,
          },
      }
      ```

      You can specify the exact number of participants you want to recruit for each response. For example, if
      you wanted to recruit 10 left handed participants, 20 right handed participants and 5 people are ambidextrous,
      you could use the following:

      ```json
      {
           "filter_id": "handedness",
           "selected_values": ["0", "1", "2"],
           "weightings": {
                "0": 10,
                "1": 20,
                "2": 5,
           },
      }
      ```

      You can specify more than one weighting requirement on a single study, and your participants will be grouped by
      the combination of each weighting filter. For example, the request below would create a study where you would
      receive 25% left handed women, 25% right handed women, 25% left handed men and 25% right handed men.

      ```json
      {
           "filter_id": "handedness",
           "selected_values": ["0", "1"],
           "weightings": {
                "0": 1,
                "1": 1,
           },
      },
      {
           "filter_id": "sex",
           "selected_values": ["0", "1"],
           "weightings": {
                "0": 1,
                "1": 1,
           },
      },
      ```


      Please note, study distribution with weightings is only supported for select type filters, weightings cannot be
      added to range filters.

      To see an example of using weightings filters in a study, please see the request samples area of
      [Studies](#tag/Studies/paths/~1studies/post).

  - name: Filter Sets
    description: |-
      Filter sets allow you to combine multiple filters into a single re-usable template, which can be used across multiple studies to ensure the same demographic requirements are applied.

      These filters are then evaluated at study publish, with each study recruiting from the available pool of participants who satisfy the selected filters at that time.

      Note that when publishing a duplicated study which used a filter set, it will use the filters applied to the filter set at the time it was applied to the original study.
      This can be updated by changing the `filter_set_version` on the study to the latest `version`, as returned on the [filter set endpoint](http://127.0.0.1:8080/#tag/Filter-Sets/paths/~1api~1v1~1filter-sets~1{id}~1/get).
  - name: Participant Groups
    description: |-
      Participant groups are saved groups of participant IDs, so you can re-contact the exact same
      participants across studies.

      Participant groups allow you do the following:
      - Create a new participant group within the scope of a project.
      - Add and remove users manually to / from the participant group.
      - Use one or more participant groups as filters for a new study.
      - Combined with study completion codes, automatically add or remove participants from a group
      when they submit a response to your study with the correct code.
  - name: Study Distribution
    description: |-
      With Prolific, you can create a study in which you can balance your sample based on a given set of eligibility
      criteria.

      For example, you may wish for your responses to be 50% male and 50% female participants, or 30% left handed and
      70% right handed participants.

      For more information on how to do this, please see [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters/Study-Distribution-(Quotas)-with-Filters)
  - name: Eligibility requirements
    description: |-
      <span  style="font-size:x-large">**Deprecated - please use [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters) instead.**</span>

      At Prolific, our participant pool is made up of a wide range of participants. To target particular participants, you can apply prescreening filters (e.g. age, gender, nationality) to the studies. For more information, you can read the [Demographic Prescreening Help Guide](https://researcher-help.prolific.com/hc/en-gb/articles/360009221093).

      When creating or updating a study, use the participant eligibility requirements object to apply the prescreening filters. Before you dive into the API and the technical details, you can look at our [participants calculator](https://prolific.com/#check-sample).

      The Eligibility Requirements can be complicated. If yours still doesn’t work, please [submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) with you your curl command.

      **Not supported**:

      - Prolific does not support prescreening participants or similar features to MTurk qualifications. We recommend the multi-part study with the 1st one to qualify the participants and the 2nd to run your research.
        If you want even greater control, you can leverage the `PreviousStudiesEligibilityRequirement` and `PreviousStudiesAllowlistEligibilityRequirement` requirements to filter participants by their entered
        completion codes (you can set these up on study creation).

        We are looking at various approaches in the future.

      ## Requirements object

      ---

      **AgeRangeEligibilityRequirement**

      This filter allows you to apply a participant age range based on their date of birth. You can select the age range from 18 to 100 with the `min_age` and `max_age` configuration. Both `min_age` and `max_age` can be sent as two different objects in the attributes array. Please note, the age range is inclusive of `max_age`.

      All the necessary information for the payload, including the class name of the requirement (`_cls`), the attributes array, and the unique id of the question (`query.id`), can be sourced from the `/api/v1/eligibility-requirements/` endpoint.

      The structure of each requirement object in the payload is as follows:

      - **_cls**: The class name of the requirement. It specifies the type of requirement (e.g. AgeRangeEligibilityRequirement).
      - **attributes**: An array of attribute objects. Each object in the array represents an option or answer. It has two properties:
        - **name**: The name of the attribute (`min_age` or `max_age`).
        - **value**: An integer that denotes the age limit.
      - **query**: An object that contains the id attribute. The `query.id` relates to the id of the question to which the object relates.

      Here is an example of how to format your request:

      ```json
        ...
        {
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.AgeRangeEligibilityRequirement",
                    "attributes": [
                        {"name": "min_age", "value": 25},
                        {"name": "max_age", "value": 35},
                    ],
                    "query": {"id": "63567529751d8c97b6f7d16d"},
                }
            ]
        }
      ```

      ---

      **ApprovalNumbersEligibilityRequirement**

      Recruit participants based on min and/or max number of approved submissions. You can send both `minimum_approvals` and `maximum_approvals` as two different objects in the attributes array.

      - To include participants that have 100 or more approved submissions, set `minimum_approvals` to value 100.

      - To include participants that have 200 or less approved submissions, set `maximum_approvals` to value 200.

      ---

      **ApprovalRateEligibilityRequirement**

      Target participants based on minimum or maximum approval rate, the percentage of approved studies. We use the upper bound of the 95% confidence interval to calculate approval rate. You can send both `minimum_approval_rate` and `maximum_approval_rate` as two different objects in the attributes array.

      - To include participants that have 95% approval rate or higher, set `minimum_approval_rate` to value 95.

      - To include participants that have 95% approval rate or lower, set `maximum_approval_rate` to value 95.

      ---

      **JoinedBeforeEligibilityRequirement**

      Only include participants who joined Prolific before a specified date (e.g. Participants who joined Prolific before 01/09/21).

      To include participants that have joined on the first of September 2021 or before, you can send an attribute with `joined_before` and value `2020-09-01`. The format of the date is YYYY-MM-DD.

      ---

      **PreviousStudiesAllowlistEligibilityRequirement**

      Include participants from selected completed studies. You can include participants from multiple studies by sending multiple attributes. <a href='https://researcher-help.prolific.com/hc/en-gb/articles/360015365674'>Read about how to invite specific participants to your study.</a>

      To include participants from a study, you can include the `id` and `value` attributes. Additionally, if you want to filter these participants to allow only those that have made a submission with a specific completion code, you can send the `completion_codes` attribute as an array of strings.

      ```json
        {
            ...
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.PreviousStudiesAllowlistEligibilityRequirement",
                    "attributes": [
                        {
                            "id": "6356a58d1da9da204b53a076",
                            "value": true,
                            "completion_codes": [
                                "CODE"
                            ]
                        }
                    ],
                }
            ]
        }
      ```

      To add previous participants whose response wasn't approved, please instead use a custom allowlist.

      ---

      **PreviousStudiesEligibilityRequirement**

      Exclude participants from the selected completed studies regardless of their submission status. You can exclude participants from multiple studies by sending multiple attributes. <a href='https://researcher-help.prolific.com/hc/en-gb/articles/360009094374'>Read about how to prevent certain participants from accessing your study.</a>

      To exclude participants from a study, you can include the `id` and `value` attributes. Additionally, if you want to filter these participants to block only those that have made a submission with a specific completion code, you can include the `completion_codes` attribute as an array of strings.

      ```json
        {
            ...
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.PreviousStudiesEligibilityRequirement",
                    "attributes": [
                        {
                            "id": "6356a58d1da9da204b53a076",
                            "value": true,
                            "completion_codes": [
                                "CODE"
                            ]
                        }
                    ],
                }
            ]
        }
      ```
      ---

      **CustomWhitelistEligibilityRequirement**

      A comma-separated list of participant and/or submission IDs for users you want to participate in the study.

      ONLY these participants will be eligible for this study. (i.e. longitudinal design)

      To include participants by id, you can send an attribute with `white_list` and value an array of participant ids.

      You may also provide submission ids, which will be converted to their corresponding participant ids.

      _»Note» We are working on renaming it to CustomAllowlistEligibilityRequirement._

      ---

      **Custom Blacklist - CustomBlacklistEligibilityRequirement**

      A comma-separated list of participant and/or submission IDs of the users you wish to make ineligible for the study.

      To exclude participants by id, you can send an attribute with `black_list` and value an array of participant ids.

      You may also provide submission ids, which will be converted to their corresponding participant ids.

      _»Note» We are working on renaming it to CustomBlocklistEligibilityRequirement._

      ---

      **Other Prescreen Requirements filters**

      Prescreening requirement filters enable participants to select one or multiple options/answers. The filters are of two types:

      - **Single Select - SelectAnswerEligibilityRequirement**: Participants can select one option. Example: "In what country do you currently reside?"

      - **Multi Select - MultiSelectAnswerEligibilityRequirement**: Participants can select multiple options. Example: "Which of the following languages are you fluent in?"

      All the necessary information for the payload can be sourced from the `/api/v1/eligibility-requirements/` endpoint. This endpoint provides the data structure for each requirement, including the class name (`_cls`), the attributes array, and the unique id of the question (`query.id`).

      The structure of each requirement object in the payload is as follows:

      - **_cls**: The class name of the requirement. It specifies the type of requirement (e.g. Single Select or Multi Select).
      - **attributes**: An array of attribute objects. Each object in the array represents an option or answer. It has two properties:
        - **value**: A boolean that denotes if this option/answer is selected. Setting it to `true` includes the participants who have selected this option/answer. You only need to provide the attributes objects for those with `value: True`. The other options will default to `false`.
        - **index**: The position of this option/answer in the array. The indexing starts from 0.
      - **query**: An object that contains the id attribute. The `query.id` relates to the id of the question to which the object relates.

      Here is an example of how to format your request:

      ```json
        {
            ...
            "eligibility_requirements": [
                {
                    "_cls": "web.eligibility.models.SelectAnswerEligibilityRequirement",
                    "attributes": [
                        {"value": True, "index": 0},
                    ],
                    "query": {"id": "63567529751d8c97b6f7d16d"},
                }
            ]
        }
      ```

      ---

      **About unique Ids**

      If you are using React or other component framework to render these requirements, you might need a unique id for every requirement.
      At the moment there is not one, but you can use the `question.id` if present or the `_cls` if the question id was missing to build a unique id.

  - name: Quota requirements
    description: |-
      <span  style="font-size:x-large">**Deprecated - please use [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters/Study-Distribution-(Quotas)-with-Filters) instead.**</span>

      This guide will walk you through the steps to utilise the quota balancing feature, which allows you to balance your participant sample based on specific requirements.

      **1. Get Eligibility Requirements**
        - To retrieve a list of all available eligibility requirements that can be used to filter participants, send a `GET` request to the following endpoint:
        `/api/v1/eligibility-requirements/`.

      **2. Find the Desired Question and Responses**
        - In the JSON response from the previous step, locate the question you want to balance on by checking the title field under each query object. Once you find the desired question, note its `id`` field.

          Additionally, take note of the attributes array within the query object, which contains each possible response. You will use these to construct the responses in Step 3. The index field in the attributes array will map to the `response_index` in the quota requirements.

          For example, if you want to balance on the “Sex” question, search for a query object with a title containing the word “Sex” and record the corresponding id. Then, record the attributes array, which may look like this:

          ```json
          [
            {
              "label": "Male",
              "name": "Male",
              "value": false,
              "index": 0
            },
            {
              "label": "Female",
              "name": "Female",
              "value": false,
              "index": 1
            }
          ]
          ```

      **3. Create Study with Quota Requirements**
      - When creating your study, send a `POST` request to the following endpoint:
        `/api/v1/studies/`.

        Include the appropriate quota requirements in the request body, as well as the `study_type` field with the value `QUOTA`.

        Use the format below as a reference:

        ```json
        {
          "study_type": "QUOTA",
          "quota_requirements": [
            {
              "type": "SelectQuestionQuotaRequirement",
              "question": {
                "id": <question_id>
              },
              "responses": [
                {
                  "response_index": 0,
                  "weight": 0.5
                },
                {
                  "response_index": 1,
                  "weight": 0.5
                }
              ]
            }
          ],
          // Other study details...
        }
        ```

        Replace the `id` field with the question ID obtained in Step 2, and adjust the responses array to reflect the desired weight for each response option using the `response_index` values obtained from the attributes array in Step 2.

  - name: Submissions
    description: |-
      A new submission is created for each participant that joins your study. Once a submission is completed, you can approve, reject or ask participants to return the submission.

      ![Submissions flow](https://assets.prolific.com/assets/img/api/submission.jpg)

      Related guide: [Managing participants and submissions](https://researcher-help.prolific.com/hc/en-gb/categories/360000859913-Managing-participants-and-submissions)

      ## Submissions guide

      **Approve, reject or return?**

      - **Approve**
        Participants will receive the reward you have set immediately. Submissions that are awaiting review are automatically approved after 21 days. We recommend that researchers approve sooner than that.
        Some of our customers prefer or like to start with auto-approval first to keep the flow simple.
      - **Reject**
        Participants are penalised for rejections and if they receive too many they will be removed from the platform entirely. Please review all submissions holistically and remember that participants have spent time and effort taking your study.
        Please think carefully about whether the rejection is justified, and try to keep rejections to a minimum.
      - **Return**
        You can message participants to ask if they can return their submission and not get rewarded. This is useful if they for example have encountered a technical issue. Many would voluntarily do so to avoid rejection.

      Related guide: [Approval, rejections and returns](https://researcher-help.prolific.com/hc/en-gb/articles/360009092394-Approvals-rejections-returns)

      ---

      **Does rejecting a participant automatically open a spot for a new participant?**

      If your study is ACTIVE (i.e. you haven’t received all the required submissions), then it will automatically open a spot for a new participant when you reject a submission.

      If your study is in AWAITING REVIEW (i.e. you have received all required submissions), you need to change the status back to ACTIVE START [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post) to replace the rejected submissions.

      ---

      **Does a participant returning their submission automatically open a spot for a new participant?**

      If your study is ACTIVE (i.e. you haven’t received all the required submissions), then it will automatically open a spot for a new participant when you reject a submission.

      If your study is in AWAITING REVIEW (i.e. you have received all required submissions), you need to change the status back to ACTIVE START [transition](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1%7Bid%7D~1transition~1/post) to replace the rejected submissions.

      ---

      **What happens if a participant takes too much time to complete the study?**

      If a participant takes too much time, the submission will time out and they will lose their access to the study URL. A new participant will take their place instead. The max time allowed is dependent on the estimated time for the study. It is always less than 24 hours.

      You can control the timeout of your experiment using `maximum_allowed_time`, but you can not set it lower than the default documented in the [create study draft API](https://docs.prolific.com/docs/api-docs/public/#tag/Studies/paths/~1api~1v1~1studies~1/post).

      ---

      **I cannot see my study on my participant account. Why is that?**

      By default, studies are visible to all eligible participants based on our algorithm. Prolific’s algorithm prioritises participants based on how often they participate, acceptance rate and many more data points to provide a balanced participation opportunity between very active and less active participants.

      In order to bypass the algorithm, you would need to publish your study to the participants you want by using the allow list.

      Check the [testing guide](https://docs.prolific.com/docs/api-docs/public/#tag/Testing) on how to test your integration and create participant test accounts.


      ```JSON
      "filters": [
        {
          "filter_id": "custom_allowlist",
          "selected_values": [
            "61f292141b0ec8b3b5ab353",
            "61f2914e3bb4b4d40080aec"
          ]
        }
      ]
      ```

      ---

      **How can I verify or validate the participant ids?**

      You can use the `SESSION_ID` URL parameter in the external study URL to get the [submission details](https://docs.prolific.com/docs/api-docs/public/#tag/Submissions/paths/~1api~1v1~1submissions~1%7Bid%7D~1/get) and confirm that it belongs to the participant.

      Our ids follow a pattern of `[a-f\d]{24}` with only numbers and the letters a, b, c, d, e, and f with a length of 24.

      ---

      ## Submission object

      A submission transitions through multiple statuses.

      - **RESERVED** - Initial state, the participant got a place for your study. By default, we reserve the study place for 10 minutes.

      - **ACTIVE** - The participant has started your experiment or survey.

      - **TIMED-OUT** - The submission has timed out, the participant does not have access to the study link.
        The max time allowed is calculated based on the estimated time for the study, it is always less than 24 hours.

      - **AWAITING REVIEW** - The participant has completed your experiment or survey.

      - **APPROVED** - The submission has been approved and paid.

      - **RETURNED** - The participant returns their submission, acknowledging they will not be paid for it. The study place becomes available for another participant.

      - **REJECTED** - Submission has been rejected. The participant is not paid. The study place becomes available for another participant.

      Related guide: [Submission statuses explained](https://researcher-help.prolific.com/hc/en-gb/articles/360009094114-Submission-statuses-explained)

  - name: Bonuses
    description: |-
      Pay bonuses for exceptional submissions or follow-up research. Bonuses can be created in bulk for multiple participants in the same study.

      ![Bonus flow](https://assets.prolific.com/assets/img/api/bonus.jpg)

      Note: We do not support concurrent requests. You can only pay a bonus to one participant at a time via our web application. You can bulk pay bonuses via the API. If you see any issues with your bulk bonus payment, please contact the support team by [submitting a request](https://researcher-help.prolific.com/hc/en-gb/requests/new).

  - name: Messages
    description: |-
      Messages with participants or other researchers.

      You can use messages to send reminders, thank participants or address their questions during your study or experiment.

      With workspaces, only the study publisher can view the messages by participants. To enable users to view messages related to a study they have access to is in our roadmap.

  - name: Workspaces
    description: |-
      Workspaces are a new way for you to collaborate with your teammates and organise research on Prolific. Each workspace has its own set of projects, studies, team members and funds.

      Related guide: [Workspace](https://researcher-help.prolific.com/hc/en-gb/sections/4500136384412-Workspaces)

      Please [submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) for feedback or feature request.

  - name: Projects
    description: |-
      Projects are a way to organise studies in a workspace.

  - name: Surveys
    description: |-
      Surveys are a way to perform prescreening on the Prolific Platform. You can link a Survey to a Study by setting the `external_study_url` on the Study to `https://prolific.com/surveys/[survey_id]`. You will need to define a Survey with the `sections` attribute, in order for this to render on the Prolific Application. See below for more details.

  - name: Hooks
    description: |-
      **This is an experimental feature that may be subject to change in the future.**

      Hooks deliver event data to your applications as it happens, offering an alternative to frequent data polling.

      The flow below shows the inbound nature of hook configuration. This is what is required to register your subscription.

      ![The inbound hook flow](https://assets.prolific.com/assets/img/api/hooks-inbound.png)

      Once your subscription is registered, the flow below shows the outbound nature of hooks.

      ![The outbound hook flow](https://assets.prolific.com/assets/img/api/hooks-outbound.png)

      ## Subscribing

      To get started, make a `GET` request to `/api/v1/hooks/event-types` to retrieve an up-to-date list of all the event types that we currently support. All event types will follow the `noun.verb` pattern, e.g. `study.status.change`. Make a note of the event type you’d like to subscribe to. You’ll need this later when setting up a subscription.

      In order to subscribe to an event, you’ll need to first set up a secret. Secrets are used in the verification step outlined below. Make a `POST` request to `/api/v1/hooks/secrets/` with the payload `{"workspace_id": <workspace_id>}`. This will create a new secret for your workspace and be returned in the response body. Keep this safe, and note that you can only have one active secret per workspace at a time.

      Next, make a `POST` request to `/api/v1/hooks/subscriptions/` with the payload `{"workspace_id": <workspace_id>, "event_type": <event_type>, "target_url": <target_url>}` to subscribe to your desired event.  If successful, the endpoint will return a response that includes an `id` field in its body. This is the unique identifier for your subscription. As well as this id, the response will contain a `X-Hook-Secret` header. Make a note of both of these. We’ll use them to confirm our intention to subscribe to our desired event type. Make a `POST` request to `/api/v1/hooks/<subscription_id>/` with the payload `{"secret": <x-hook-secret>}`. If subscription confirmation is successful, you should receive a `200` status code.

      ## Receiving

      Having successfully subscribed to our desired event type, our target url will be notified each and every time the associated event is triggered. You can react to this event in any way you see fit. The response body will adhere to the following structure:

      ```json
      {"resource_id": <resource_id>, "event_type": <event_type>}
      ```

      The `resource_id` field refers to the resource that is related to the triggered event. For example, for a `study.status.change` event type, the resource is study and `status.change` is the event.  To extend this example, you may wish to make a subsequent call to `/api/v1/studies/<workspace_id>` to find out exactly what status your study now has.

      ## Verifying

      Hooks have been implemented to provide a measure to verify the authenticity of a payload. This helps to ensure only payloads sent by Prolific are being accepted by your endpoint. Hook requests will contain two headers, `X-Prolific-Request-Signature` and `X-Prolific-Request-Timestamp`. The former represents signature and the latter represents a UNIX timestamp of when the request was sent.

      In order to verify the signature, you can create the same SHA256 Hashed Message Authentication Code (HMAC) signature and then compare it to `X-Prolific-Request-Signature`. To do this, sign the request body and timestamp with your secret key using SHA256 and then base64 encode the resulting digest.

      ### Example with Python

      ```python
      encoded_secret = SECRET.encode()
      body = json.dumps(body)
      calculated_signature = base64.b64encode(
          hmac.new(
              encoded_secret, str.encode(timestamp + body), hashlib.sha256
          ).digest()
      )
      is_valid = hmac.compare_digest(
          calculated_signature, str.encode(signature)
      )
      ```
  - name: Invitations
    description: |-
      Invitations are an integral part of Prolific that facilitate collaboration and project management.

      - **Workspace Invitations** - These are issued to invite users to collaborate in a shared workspace.
      - **Project Invitations** - Project invitations are used to invite users to participate or collaborate on a specific project.

      Through the Invitations API, you can create these various types of invitations.

      Invitations contain an 'association' attribute which can refer to a workspace or a project to which the user is being invited.

  - name: Testing
    description: |-
      To confirm that your integration works correctly, you can simply publish studies to yourself as a participant. This requires credit for now, but we are exploring a sandbox option in the future. You can create a separate researcher account for testing purposes.

      **Create participant accounts for testing**

      1. [Submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to our support team with
          - List of emails for the participant accounts (this cannot be the same as the researcher one)
          - The country you or your team is based for testing the participant accounts
      2. Log in to your participant test accounts.

      _If you want to be signed in with your researcher and participant account, use an incognito or a different browser for your participant account._

      **Publish test studies to testers only**

      1. Create a study draft with an allow list of participant test account IDs.

        ```json
        "filters": [
          {
            "filter_id": "custom_allowlist",
            "selected_values": [
              "61f292141b0ec8b3b5ab353",
              "61f2914e3bb4b4d40080aec"
            ]
          }
        ]
        ```

      2. Publish the study draft. The study will be visible in your participant account.
      3. Complete the study as a participant to test the flow.
      4. Approve or reject participants.

      _Rejected participants are downgraded and may not see new studies. If this occurs, please [submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to our support team with the participant ID to reset your participant account for further testing._

  - name: Launch your integration
    description: |-
      Once your integration is working as expected you can launch your integration with real participants at any time. If you intend to use it for a large number of participants, you can [submit a request](https://researcher-help.prolific.com/hc/en-gb/requests/new) to our support team to keep an eye out for participants' messages.

paths:
  /api/v1/users/me/:
    get:
      tags:
        - Users
      summary: Retrieve a user
      description: |-
        Use this endpoint to test your token and retrieve the basic information of your account.

        Add an `Authorization` header with the value `Token <your token>`.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      operationId: GetUser
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: 60a42f4c693c29420793cb73
                email: your@email.com
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - token: []
    x-summary: Retrieve your account details
  /api/v1/eligibility-requirements/:
    get:
      deprecated: true
      tags:
        - Eligibility requirements
      summary: Get list of all requirements.
      description: |-
        This endpoint is deprecated - please use [Filters](https://docs.prolific.com/docs/api-docs/public/#tag/Filters) instead.

        Get a list of all the requirements defined by Prolific that can
        be used to filter participants.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        "200":
          description: Full list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequirementsResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetEligibilityRequirements
      security:
        - token: []
    x-summary: All requirements
  /api/v1/messages/:
    post:
      tags:
        - Messages
      summary: Send a message
      description: |-
        Send a message to a participant or another researcher
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMessage"
            examples:
              message_one_participant:
                value:
                  recipient_id: 619e049f7648a4e1f8f3645b
                  body: Thanks for participating in my study
                  study_id: 719e049f7648a4e1f8f3645a

        required: false
      responses:
        "204":
          description: The message has been sent
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: SendMessage
      security:
        - token: []
      x-codegen-request-body-name: messages
      x-summary: Send message
    get:
      tags:
        - Messages
      summary: Retrieve messages
      description: Get messages between you and another user or your messages with all users.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          description: Another user ID, must be provided if no created_after date is provided.
          required: false
          schema:
            type: string
        - name: created_after
          in: query
          description: Only fetch messages created after timestamp. Datetime in ISO8601 format. Must be provided if no user_id is provided. You can only fetch up to the last 30 days of messages.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetMessages
      security:
        - token: []
      x-summary: Get messages
  /api/v1/messages/unread/:
    get:
      tags:
        - Messages
      summary: Retrieve unread messages
      description: |-
        Get all unread messages.
        The messages you have sent are never returned, only messages you have received and not read.
        It does not mark those messages as read.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Messages"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetUnreadMessages
      security:
        - token: []
  /api/v1/messages/bulk/:
    post:
      tags:
        - Messages
      summary: Send a message to multiple participants
      description: |-
        Send a message to multiple participants.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendBulkMessage"
            examples:
              message_multiple_participants:
                value:
                  ids:
                    - 619e049f7648a4e1f8f3645b
                    - 619e049f7648a4e1f8f3645c
                    - 619e049f7648a4e1f8f3645d
                  body: Thanks for participating in my study
                  study_id: 6569ece7ca177d19117b1b95
        required: false
      responses:
        "204":
          description: The message has been sent
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      security:
        - token: []
      x-codegen-request-body-name: messages
      x-summary: Send message
  /api/v1/projects/{project_id}/studies/:
    get:
      tags:
        - Studies
      summary: List all studies in a project
      description: List all of your studies in a project.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: project_id
          in: path
          description: Project id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of studies for the given project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudiesListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetProjectStudies
      security:
        - token: []
  /api/v1/studies/:
    get:
      tags:
        - Studies
      summary: List all studies
      description: List all studies, with the option to filter by study status.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: |-
            Filter studies by status. Accepts a string in the format "(active|published|...)", where "active" and "published" are example statuses.
          schema:
            type: string
            enum:
              [
                ACTIVE,
                PAUSED,
                UNPUBLISHED,
                PUBLISHING,
                COMPLETED,
                AWAITING REVIEW,
                UNKNOWN,
                SCHEDULED,
              ]
      responses:
        "200":
          description: List of studies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudiesListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetStudies
      security:
        - token: []
    post:
      tags:
        - Studies
      summary: Create a draft study
      externalDocs:
        description: Publish your study
        url: http://127.0.0.1:8080/docs/studies#tag/Studies/operation/PublishStudy
      description: |-
        Create a draft study. Publishing a study is a two step process, first create a draft study then publish it.

        ## Taskflow Studies:
        Taskflow studies are created in the same manner as regular studies, however instead of providing an **external_study_url**, you should
        provide an access_details array with **access_detail** objects instead, containing an external_url field and a total_allocation field.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStudy"
            examples:
              study_for_everybody:
                value:
                  name: Study about API's
                  internal_name: WIT-2021 Study about API's version 2
                  description: This study aims to determine how to make a good public API
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: url_parameters
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                    - code: "DEF234"
                      code_type: "FOLLOW_UP_STUDY"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                        - action: "ADD_TO_PARTICIPANT_GROUP"
                          participant_group: "619e049f7648a4e1f8f3645b"
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 100
                  device_compatibility:
                    - desktop
                  peripheral_requirements: []
                  filters: []
              study_with_allow_list:
                value:
                  name: Study about API's for selected participants
                  internal_name: WIT-2022 Study about API's version 2
                  description: This study aims to determine how to make a good public API
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                    - code: "DEF234"
                      code_type: "FOLLOW_UP_STUDY"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                        - action: "ADD_TO_PARTICIPANT_GROUP"
                          participant_group: "619e049f7648a4e1f8f3645b"
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 13
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  filters:
                    - filter_id: "custom_allowlist"
                      selected_values: ["619e049f7648a4e1f8f3645b"]
              study_with_blocked_studies:
                value:
                  name: Study about APIs with blocked studies
                  description: |-
                    This study is not accessible to participants of studies 319e049f7648a4e1f8f3645a and 919e049f7648a4e1f8f3645d
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                    - code: "DEF234"
                      code_type: "FOLLOW_UP_STUDY"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                        - action: "ADD_TO_PARTICIPANT_GROUP"
                          participant_group: "619e049f7648a4e1f8f3645b"
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 100
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  filters:
                    - filter_id: "previous_studies_blocklist"
                      selected_values: ["619e049f7648a4e1f8f3645b"]
              minimal_study:
                value:
                  name: "Test"
                  description: "test"
                  external_study_url: "https://google.com"
                  reward: 100
                  total_available_places: 500
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "MANUALLY_REVIEW"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
              study_in_project:
                value:
                  name: "Study in project"
                  description: "study in project"
                  external_study_url: "https://google.com"
                  reward: 100
                  total_available_places: 500
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                    - code: "DEF234"
                      code_type: "FOLLOW_UP_STUDY"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                        - action: "ADD_TO_PARTICIPANT_GROUP"
                          participant_group: "619e049f7648a4e1f8f3645b"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
                  project: "619e049f7648a4e1f8f3645b"
              study_with_participant_group_allow_list:
                value:
                  name: Study about API's for participants in my participant group
                  internal_name: WIT-2022 Study about API's version 2
                  description: This study aims to determine how to make a good public API
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                    - code: "DEF234"
                      code_type: "FOLLOW_UP_STUDY"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                        - action: "ADD_TO_PARTICIPANT_GROUP"
                          participant_group: "619e049f7648a4e1f8f3645b"
                  total_available_places: 30
                  estimated_completion_time: 5
                  reward: 13
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  filters:
                    - filter_id: "participant_group_allowlist"
                      selected_values: ["619e049f7648a4e1f8f3645b"]
              multiple_participant_groups_either_or:
                value:
                  name: Example where a participant can be in either participant group
                  internal_name: Study with multiple participant groups
                  description: A participant can be in either of these groups to gain study access
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                  total_available_places: 30
                  estimated_completion_time: 1
                  reward: 100
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  filters:
                    - filter_id: "participant_group_allowlist"
                      selected_values:
                        ["64514609c0265e1da4a74127", "64660e2e0ce5307750bf5c99"]
              multiple_participant_groups_exclusive_to_both:
                value:
                  name: Example where a participant has to be in both participant groups
                  internal_name: Study with multiple participant groups
                  description: A participant has to be in both groups to gain study access
                  external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
                  prolific_id_option: question
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                  total_available_places: 30
                  estimated_completion_time: 1
                  reward: 100
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  filters:
                    - filter_id: "participant_group_allowlist"
                      selected_values: ["64514609c0265e1da4a74127"]
                    - filter_id: "participant_group_allowlist"
                      selected_values: ["64660e2e0ce5307750bf5c99"]
              multi_submission_study:
                value:
                  name: "A multiple submission study"
                  description: "Allow a participant to have multiple submissions up to 10 on the study"
                  external_study_url: "https://google.com"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: "question"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
                  submissions_config:
                    max_submissions_per_participant: 10
              study_with_select_filters:
                value:
                  name: "Test"
                  description: "test"
                  external_study_url: "https://google.com"
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "MANUALLY_REVIEW"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters:
                    - filter_id: handedness
                      selected_values:
                        - "2"
              study_with_range_filters:
                value:
                  name: "Test"
                  description: "test"
                  external_study_url: "https://google.com"
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "MANUALLY_REVIEW"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters:
                    - filter_id: age
                      selected_range:
                        lower: 18
                        upper: 19
              study_with_filter_set:
                value:
                  name: "Test"
                  description: "test"
                  external_study_url: "https://google.com"
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "MANUALLY_REVIEW"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filter_set_id: "644b9cace850cb37684f0892"
              study_with_weighted_filters:
                value:
                  name: "Test"
                  description: "test"
                  external_study_url: "https://google.com"
                  reward: 13
                  total_available_places: 500
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "MANUALLY_REVIEW"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters:
                    - filter_id: handedness
                      selected_values:
                        - "1"
                        - "2"
                      weightings:
                        0: 0.5
                        1: 0.5
              study_labelled_as_interview:
                value:
                  name: "Video Interview"
                  description: "In this study you will join a video call where we'll ask you some questions."
                  external_study_url: "https://google.com"
                  reward: 100
                  total_available_places: 500
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "MANUALLY_REVIEW"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  filters: []
                  study_labels: ["interview"]
              study_with_taskflow:
                value:
                  name: "Test"
                  description: "test"
                  reward: 10
                  total_available_places: 50
                  prolific_id_option: "question"
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "MANUALLY_REVIEW"
                  device_compatibility: ["mobile", "desktop", "tablet"]
                  peripheral_requirements: []
                  estimated_completion_time: 1
                  access_details:
                    - external_url: "https://google.com"
                      total_allocation: 20
                    - external_url: "https://bing.com"
                      total_allocation: 20
                    - external_url: "https://yahoo.com"
                      total_allocation: 10

      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: CreateStudy
      security:
        - token: []
      x-codegen-request-body-name: study
    x-summary: Create a draft study
  /api/v1/studies/{id}/transition/:
    post:
      tags:
        - Studies
      summary: Publish a draft study
      description: |-
        Once the study is published, participants can partake in your experiment or survey.

        There are other status transitions available once the study is published:
        - PAUSE: Pause the study
        - START: Start a paused study
        - STOP: Stop a study completely, to make it active again you will need to increase the number of places

        To learn more about it check out [help center](https://researcher-help.prolific.com/hc/en-gb/articles/360010963354)
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              publish_study:
                value:
                  action: PUBLISH
              pause_study:
                value:
                  action: PAUSE
              restart_paused_study:
                value:
                  action: START
              stop_study:
                value:
                  action: STOP
            schema:
              $ref: "#/components/schemas/StudyTransition"
        required: false
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: PublishStudy
      security:
        - token: []
      x-codegen-request-body-name: study
    x-summary: Study publication
  /api/v1/studies/{id}/:
    get:
      tags:
        - Studies
      summary: Retrieve a study
      description: Retrieve a study by id. If you are polling the API for updates to a study, consider using a [Hook](#tag/Hooks). We will call your endpoint when certain events occur on your study, such as new completed submissions or changes in status.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetStudy
      security:
        - token: []
    patch:
      tags:
        - Studies
      summary: Update a study
      description: |-
        You can update any field for a draft study.

        Once the study has been published only the following fields can be updated with some restrictions:
        - internal_name: Internal name of the study, not shown to participants
        - total_available_places: Only increasing is allowed. A completed study will become active again and resume recruiting of participants. For more information, check the [guide](https://researcher-help.prolific.com/hc/en-gb/articles/360009222553)
        - access_details: Sending an access_detail will add a new task and increase overall study places by the number in the total_allocation field. Sending both access_details and total_available_places will increase places on existing URLs by the number specified on the access_detail.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              increase_places:
                value:
                  total_available_places: 200
              update_internal_name:
                value:
                  internal_name: new_internal_name
              update_completion_codes:
                value:
                  completion_codes:
                    - code: "ABC123"
                      code_type: "COMPLETED"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                    - code: "DEF234"
                      code_type: "FOLLOW_UP_STUDY"
                      actions:
                        - action: "AUTOMATICALLY_APPROVE"
                        - action: "ADD_TO_PARTICIPANT_GROUP"
                          participant_group: "619e049f7648a4e1f8f3645b"
              label_study_as_interview:
                value:
                  study_labels: ["interview"]
              taskflow_add_new:
                value:
                  access_details:
                    - external_url: "https://bing.com"
                      total_allocation: 30
              taskflow_increase_places:
                value:
                  total_available_places: 200
                  access_details:
                    - external_url: "https://google.com"
                      total_allocation: 30
            schema:
              $ref: "#/components/schemas/BaseStudy"
        required: false
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: UpdateStudy
      security:
        - token: []
      x-codegen-request-body-name: study
    delete:
      tags:
        - Studies
      summary: Delete a study
      description: |-
        Published studies cannot be deleted, but you can delete draft studies.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DeleteStudy
      security:
        - token: []
      x-codegen-request-body-name: study
    x-summary: Actions on one study
  /api/v1/studies/{id}/access-details-progress/:
    get:
      tags:
        - Studies
      summary: Get taskflow progress
      description: |-
        Get progress for each acess_detail of a taskflow study.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Duplicated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyAccessDetailsProgress"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetStudyAccessDetailsProgress
      security:
        - token: []
  /api/v1/studies/{id}/cost/:
    get:
      tags:
        - Studies
      summary: Show Study cost
      description: Returns cost information about the study. Default behaviour is to return cost at the time of the request, but projected cost can be requested via a query parameter.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
        - name: is_projected
          in: query
          description: Return the projected cost of the study
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Return the total cost for the study
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyTotalCost"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetStudyCost
      security:
        - token: []
    x-summary: Get Study Cost
  /api/v1/studies/{study_id}/predicted-recruitment-time/:
    get:
      tags:
        - Studies
      summary: Show Study predicted reqruitment time
      description: |-
        Returns the predicted recruitment time for the study if it was published right now, based on a machine learning model.
        The recruitment time is the time from publish to the time when the final participant starts their submission.
        It does not account for the time to complete the submission.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: study_id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Return the predicted recruitment time for the study
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyPredictedRecruitmentTime"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetStudyPredictedRecruitmentTime
      security:
        - token: []
  /api/v1/studies/{id}/submissions/:
    get:
      tags:
        - Studies
      summary: List study submissions
      description: Returns basic information of the submissions, including the
        study id, participant id, status and start timestamp
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List submissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetStudySubmissions
      security:
        - token: []
    x-summary: List study submissions
  /api/v1/studies/{id}/export/:
    get:
      tags:
        - Studies
      summary: Download demographic data
      description: |-
        __This is an evolving feature and the exact content of such exports is subject to change, so use at your own risk.__

        Download a snapshot of the participants' prescreening responses at the time that they took your study. Specify the optional `?method=EMAIL` query parameter if you want this to be sent to your email.

        In addition to the responses to all prescreeners applied to the study (subject to change), you'll also have access to the following data:

        * Submission id
        * Participant id
        * Submission status
        * Started date-time
          * Expressed in UTC
          * ISO 8601 formatted
        * Completed date-time
          * Expressed in UTC
          * ISO 8601 formatted
        * Time taken (in seconds)
        * Age
        * Sex
          * Participants were asked the following question: What is your sex, as recorded on legal/official documents?
        * First language
        * Current country of residence
        * Nationality
        * Country of birth
        * Student status
        * Employment status
        * Reviewed at date-time
          * Expressed in UTC
          * ISO 8601 formatted
        * Completion code ('entered code')

        Learn more on [Exporting Prolific demographic data](https://researcher-help.prolific.com/hc/en-gb/articles/360009391633-Exporting-Prolific-demographic-data).
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: Method
          schema:
            type: string
            enum: [EMAIL]
      responses:
        "200":
          description: Downloaded
          content:
            text/csv:
              schema:
                type: string
                description: A CSV string if no method is provided.
            application/json:
              schema:
                type: object
                description: A status report if the email method is provided.
                properties:
                  status:
                    type: string
                    enum: [Your export should arrive shortly.]
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: ExportStudy
      security:
        - token: []
  /api/v1/studies/{id}/clone/:
    post:
      tags:
        - Studies
      summary: Duplicate a study
      description: |-
        Duplicating a study can save a lot of time and effort compared to creating a new study from scratch, since all of the information and data from the original study will be carried over to the new study. Additionally, duplicating a study can help ensure that the new study is set up consistently with the original, reducing the risk of errors or inconsistencies.

        To prevent repeat participation, a block list containing the original study will be added to the duplicated study's filters unless `block_previous_participants` is set to `false` in the request body.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                block_previous_participants:
                  type: boolean
                  description: Controls whether the block list is added or not.
                  default: true
      responses:
        "200":
          description: Duplicated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DuplicateStudy
      security:
        - token: []
  /api/v1/study-cost-calculator/:
    post:
      tags:
        - Studies
      summary: Calculate the study cost
      description: Calculate the study cost, including VAT and fees.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              simple_study_cost:
                value:
                  reward: 100
                  total_available_places: 5
            schema:
              $ref: "#/components/schemas/StudyCostRequest"
        required: false
      responses:
        "200":
          description: Calculated total cost
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyCostResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: CalculateStudyCost
      security:
        - token: []
      x-codegen-request-body-name: input
    x-summary: Calculate the study cost
  /api/v1/submissions/:
    get:
      tags:
        - Submissions
      summary: List submissions
      description: Returns basic information of the submissions, including the
        study id, participant id, status and start timestamp
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: study
          in: query
          description: Optional filter by study ID. This is the ID we pass to the survey platform using %STUDY_ID%
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List submissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: GetSubmissions
      security:
        - token: []
    x-summary: List submissions
  /api/v1/submissions/{id}/:
    get:
      tags:
        - Submissions
      summary: Retrieve a submission
      description: |-
        Returns the detailed information of a submission, including the
        study id, participant id, status and start timestamp
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: |-
            Submission id. This is the ID we pass to the survey platform
            using %SESSION_ID%
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionDetail"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetSubmission
      security:
        - token: []
    x-summary: Submission details
  /api/v1/submissions/{id}/transition/:
    post:
      tags:
        - Submissions
      summary: Approve or reject a submission
      description: |-
        Transition a submission to `APPROVED`, `REJECTED` or `AWAITING_REVIEW`. Once the status is changed, it can not be restored to its previous value.

        Note this endpoint is idempotent, so if you make the same request twice, the second request will be ignored.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: |-
            Submission id. This is the ID we pass to the survey platform
            using %SESSION_ID%
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionTransition"
            examples:
              approve_submission:
                value:
                  action: APPROVE
              reject_submission:
                value:
                  action: REJECT
                  message: More than 100 chars long message to amuse the participant with my knowledge of the english language in this funny example
                  rejection_category: FAILED_INSTRUCTIONS
              complete_submission:
                value:
                  action: COMPLETE
                  completion_code: CODE1290
        required: false
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: TransitionSubmission
      security:
        - token: []
      x-codegen-request-body-name: study
    x-summary: Approve or reject
  /api/v1/submissions/{id}/request-return/:
    post:
      tags:
        - Submissions
      summary: >-
        Request the participant who submitted the response to return their
        response
      description: >
        **This is an experimental feature that may be subject to change in the future.**
        <br/>

        It offers researchers the ability to ask a participant to return a submission.
        The return reason must be provided in the request and can be any free text string.
        <br/>
        The Prolific UI allows users to select any of the following options:

        * Didn't finish the study

        * Encountered technical problems

        * Withdrew consent

        * Other ( uses the free text input)


        This constructs a message around the reasons provided so there is no need to provide
        additional text beyond the reasons.

        <img alt="Example" src="/assets/img/api/message.png" />

      parameters:
        - name: id
          in: path
          description: The submission id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - request_return_reasons
              properties:
                request_return_reasons:
                  type: array
                  items:
                    type: string
              example:
                request_return_reasons:
                  - Withdrew consent.
                  - Did not finish study.
      responses:
        "200":
          description: >
            A message is sent to the participant belonging to the submission
            asking them to return.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReturnRequestedResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: RequestSubmissionReturn
      security:
        - token: []
  /api/v1/submissions/bulk-approve/:
    post:
      tags:
        - Submissions
      summary: Bulk approve submissions
      description: |-
        Bulk approve study submissions to pay participants after they have
        completed your survey or experiment. There are two variant payloads to
        this request.

        1. You can supply a Study ID, and a list of participant IDs, or
        2. You can provide a list of submission IDs

        We strongly recommend that you provide a list of submission IDs.
        These submissions do not need to be from the same study.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            examples:
              bulk_approve_two_participants:
                value:
                  study_id: 60f6acb180a7b59ac0621f9e
                  participant_ids:
                    - 60f25f799fbd8a136cc6a9b0
                    - 5ce69ff9b1e73b000146186d
              bulk_approve_multi_submissions:
                value:
                  submission_ids:
                    - 60f25f799fbd8a136cc6a9b0
                    - 5ce69ff9b1e73b000146186d
            schema:
              oneOf:
                - properties:
                    study_id:
                      type: string
                    participant_ids:
                      type: array
                      items:
                        type: string
                  required:
                    - study_id
                    - participant_ids
                  title: "Participant IDs"
                - properties:
                    submission_ids:
                      type: array
                      items:
                        type: string
                  required:
                    - submission_ids
                  title: "Submission IDs"
      responses:
        "200":
          description: Bulk approve in progress
          content:
            application/json:
              schema:
                type: string
                example: The request to bulk approve has been made successfully.
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: BulkApproveSubmissions
      security:
        - token: []
      x-codegen-request-body-name: user
    x-summary: Bulk approve submissions
  /api/v1/submissions/bulk-screen-out/{id}/:
    post:
      tags:
        - Submissions
      summary: Bulk screen out submissions
      description: |-
        This endpoint is designed to be used as part of a custom screening study.
        If a participant has taken part in a study where you have asked screening questions
        and has not met your screening requirements, this endpoint allows you to screen out
        multiple participants at once.
        The endpoint accepts a list of submission ID's and a bonus amount and will perform the following actions:
        - Change the status of the submission to `SCREENED_OUT` which is equivalent to returning the submission.
        - Pay the participant a bonus, specified by you.
        - Send the participant a message explaining that they have been screened out and showing their bonus amount.
        All submission ID's must belong to the specified study. Bonus per submission is a decimal value in your study
        currency, e.g. 1.50 for £1.50.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Study id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkScreenOutRequest"
      responses:
        "202":
          description: Bulk screen out in progress
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The request to bulk screen out has been made successfully.
                additionalProperties: true
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDetail"
      operationId: BulkScreenOutSubmissions
      security:
        - token: []
      x-codegen-request-body-name: user
    x-summary: Bulk screen out submissions
  /api/v1/submissions/bonus-payments/:
    post:
      tags:
        - Bonuses
      summary: Set up bonuses
      description: |-
        Set up bonus payments to one or more participants/submissions in a study.

        You need the study id, the participant|submission ids and the request in CSV format.

        The csv_bonuses field needs to be structured in the format of either:

        - `<participant_id>,<amount>\n`.
        - `<submission_id>,<amount>\n`.

        Setting up a bonus payment does not actually pay them, to do so check [/api/v1/bulk-bonus-payments/{id}/pay/](#tag/Bonuses/paths/~1api~1v1~1bulk-bonus-payments~1%7Bid%7D~1pay~1/post)

        The submission and participant IDs need to have taken part in the study in order for this call to be successful.
        If not, you will get a "400" HTTP response back, which explains which IDs are incorrect.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                study_id:
                  type: string
                csv_bonuses:
                  type: string
              example:
                study_id: 60f6acb180a7b59ac0621f9e
                csv_bonuses: |-
                  60ffe5c8371090c7041d43f8,4.25
                  60ff44a1d00991f1dfe405d9,4.25
        required: false
      responses:
        "201":
          description: Bonus created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkBonus"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateBonusPayments
      security:
        - token: []
      x-codegen-request-body-name: user
    x-summary: Set up bonus payment
  /api/v1/bulk-bonus-payments/{id}/pay/:
    post:
      tags:
        - Bonuses
      summary: Pay bonuses
      description: |-
        Bonus payments are made asynchronously.
        The payment will be done in the following minutes and your balance will be updated accordingly.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Bulk bonus payment id
          required: true
          schema:
            type: string
      responses:
        "202":
          description: Successfully recieved bonus payments request. The bonuses will be paid asynchronously.
          content:
            application/json:
              schema:
                type: string
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: PayBonusPayments
      security:
        - token: []
    x-summary: Process bulk bonus payment
  /api/v1/workspaces/:
    get:
      tags:
        - Workspaces
      summary: Get all a user's workspaces
      description: |-
        Gets a list of all workspaces that the user is a member of.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspacesListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetWorkspaces
      security:
        - token: []
    post:
      tags:
        - Workspaces
      summary: Create a workspace
      description: |-
        Creates a new workspace and adds the user as a Workspace Admin.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWorkspace"
            examples:
              simple_workspace:
                value:
                  title: My new workspace
              great_british_pounds_workspace:
                value:
                  title: My workspace using British Pounds
                  currency_code: GBP
              united_states_dollars_workspace:
                value:
                  title: My workspace using US Dollars
                  currency_code: USD
      responses:
        "201":
          description: Created workspace
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateWorkspace
      security:
        - token: []
    x-summary: Workspace api
  /api/v1/workspaces/{workspace_id}/:
    get:
      tags:
        - Workspaces
      summary: Get workspace
      description: |-
        Gets a workspace's details
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: workspace_id
          in: path
          description: Workspace id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetWorkspace
      security:
        - token: []
    patch:
      tags:
        - Workspaces
      summary: Update a workspace
      description: |-
        Updates a workspace's details.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: workspace_id
          in: path
          description: Workspace id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
            examples:
              update_workspace_title:
                value:
                  id: 63722982f9cc073ecc730f6b
                  title: My new workspace
      responses:
        "200":
          description: Updated workspace redirect link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: UpdateWorkspace
      security:
        - token: []
    x-summary: Workspace api
  /api/v1/workspaces/{workspace_id}/balance/:
    get:
      tags:
        - Workspaces
      summary: Get the balance of a workspace
      description: |-
        Provides details of the funds available in the workspace.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: workspace_id
          in: path
          description: Workspace id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceBalance"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetWorkspaceBalance
      security:
        - token: []
      x-summary: Workspace api
  /api/v1/workspaces/{workspace_id}/projects/:
    get:
      tags:
        - Projects
      summary: Get all projects in a workspace
      description: |-
        Gets a list of all the projects within the workspace.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: workspace_id
          in: path
          description: Workspace id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectShortListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetProjects
      security:
        - token: []
    post:
      tags:
        - Projects
      summary: Create a project
      description: |-
        Creates a new project within the workspace.
        When this project is created, it adds the user as a Project Editor.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: workspace_id
          in: path
          description: Workspace id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProject"
            examples:
              simple_project_post:
                value:
                  title: My new project
      responses:
        "201":
          description: Successfully created project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateProject
      security:
        - token: []
    x-summary: Workspace api
  /api/v1/projects/{project_id}/:
    get:
      tags:
        - Projects
      summary: Get project
      description: |-
        Gets a project's details
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: project_id
          in: path
          description: Project id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetProject
      security:
        - token: []
    patch:
      tags:
        - Projects
      summary: Update a project
      description: |-
        Update a project's details
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: project_id
          in: path
          description: Project id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
            examples:
              update_project_title:
                value:
                  id: 63722982f9cc073ecc730f6b
                  title: My new project
      responses:
        "200":
          description: Updated project redirect link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: UpdateProject
      security:
        - token: []
    x-summary: Workspace api
  /api/v1/hooks/event-types/:
    get:
      tags:
        - Hooks
      summary: List all subscribable event types
      description: You can subscribe to any of the event types defined in this response.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of event types that can be subscribed to.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeList"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetEventTypes
      security:
        - token: []
    x-summary: Hooks
  /api/v1/hooks/secrets/:
    get:
      tags:
        - Hooks
      summary: List all secrets
      description: A view of all the secrets for the workspaces you belong to.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: workspace_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretList"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetSecrets
      security:
        - token: []
    post:
      tags:
        - Hooks
      summary: Create/replace a secret
      description: |-
        Generate a secret for verifying the request signature header of the subscription payload. If a secret already exists, this call will delete the old secret and create a new one.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecret"
            examples:
              create_secret:
                value:
                  workspace_id: "63519c1d5b139662f8cde482"
      responses:
        "201":
          description: Generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretDetail"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateSecret
      security:
        - token: []
    x-summary: Hooks
  /api/v1/hooks/subscriptions/:
    get:
      tags:
        - Hooks
      summary: List all subscriptions
      description: A view of all subscriptions you have created.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: is_enabled
          in: query
          description: A filter to only pull back enabled subscriptions. Default true.
          required: false
          schema:
            type: boolean
        - name: workspace_id
          in: query
          description: The Workspace ID we want to get the subscriptions for. If not given, the subscriptions for all of your workspaces will be returned.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of subscriptions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionList"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetSubscriptions
      security:
        - token: []
    post:
      tags:
        - Hooks
      summary: Create a subscription
      description: |-
        Create a subscription for an event type. When an event is triggered in the Prolific system, the hook will automatically notify the specified target URL.

        Before creating a subscription, you must ensure that you have created a secret for your workspace.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionDetail"
            examples:
              subscription_for_study_publish:
                value:
                  workspace_id: 63722982f9cc073ecc730f6b
                  event_type: study.status.change
                  target_url: https://example.com/api/v1/studies/
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionList"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateSubscription
      security:
        - token: []
    x-summary: Hooks
  /api/v1/hooks/subscriptions/{subscription_id}/:
    get:
      tags:
        - Hooks
      summary: Retrieve a subscription
      description: Get a single subscription
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: subscription_id
          in: path
          description: Subscription id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionDetail"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetSubscription
      security:
        - token: []
    post:
      tags:
        - Hooks
      summary: Confirm a subscription
      description: Confirm a subscription to an event type
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: subscription_id
          in: path
          description: Subscription id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionDetail"
            examples:
              subscription_disable:
                value:
                  workspace_id: 63722982f9cc073ecc730f6b
                  event_type: study.status.change
                  target_url: https://example.com/api/v1/studies/
                  is_enabled: false
              hook_update_target:
                value:
                  workspace_id: 63722982f9cc073ecc730f6b
                  event_type: study.status.change
                  target_url: "https://anotherexample.com/api/v1/"
                  is_enabled: false
      responses:
        "200":
          description: Confirmed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionDetail"
          headers:
            X-Hook-Secret:
              schema:
                type: string
                description: A unique value computed for each new subscription.
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: ConfirmSubscription
      security:
        - token: []
    patch:
      tags:
        - Hooks
      summary: Update a subscription
      description: This allows you to update a subscription. For example you can temporarily disable a subscription if you wish.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: subscription_id
          in: path
          description: Subscription id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionUpdateDetail"
            examples:
              subscription_disable:
                value:
                  event_type: study.status.change
                  target_url: https://example.com/api/v1/studies/
                  is_enabled: false
              subscription_update_target:
                value:
                  event_type: study.status.change
                  target_url: "https://anotherexample.com/api/v1/"
                  is_enabled: false
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionDetail"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: UpdateSubscription
      security:
        - token: []
    delete:
      tags:
        - Hooks
      summary: Delete a subscription
      description: If you no longer require to be notified of a certain event type, you can delete a subscription. If you want to temporarily pause notifications, you can use the PATCH request documented.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: subscription_id
          in: path
          description: Subscription id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DeleteSubscription
      security:
        - token: []
    x-summary: Hooks
  /api/v1/hooks/subscriptions/{subscription_id}/events/:
    get:
      tags:
        - Hooks
      summary: Get subscription events
      description: Get all of the events that have triggered for the given subscription.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: subscription_id
          in: path
          description: Subscription id
          required: true
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            title: Offset
            default: 0
            minimum: 0
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            title: Limit
            default: 100
            minimum: 1
            maximum: 1000
            type: integer
        - name: status
          in: query
          description: Filter events by status. Accepts a single status or a JSON array of statuses as a string.
          required: false
          schema:
            type: string
          examples:
            single_status:
              value: "SUCCEEDED"
            multiple_statuses:
              value: '["SUCCEEDED", "FAILED"]'
        - name: resource_id
          in: query
          description: Filter events by the ID of the resource for which the event was sent.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionEventList"
              example:
                results:
                  - id: "6394cee483e14a167638b36c"
                    datetime_created: "2022-12-10T18:24:36.041000Z"
                    datetime_updated: "2022-12-10T18:24:36.041000Z"
                    event_type: "study.status.change"
                    resource_id: "6394cee383e14a167638b368"
                    status: "SUCCEEDED"
                    target_url: "https://example.com"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetEvents
      security:
        - token: []
  /api/v1/surveys/:
    get:
      tags:
        - Surveys
      summary: Get all surveys
      description: |-
        Get all the surveys for a researcher.
      parameters:
        - name: researcher_id
          in: query
          required: true
          schema:
            title: Researcher Id
            type: string
        - name: offset
          in: query
          required: false
          schema:
            title: Offset
            default: 0
            minimum: 0
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            title: Limit
            default: 100
            minimum: 1
            maximum: 1000
            type: integer
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetAllSurveysResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetSurveys
      security:
        - token: []
    post:
      tags:
        - Surveys
      summary: Create survey
      description: |-
        You can create a survey with either `sections -> questions` or just `questions`. This allows you to decide
        how much flexibility you want in your survey design. However, if you want to render the survey in the Prolific Application, you must use `sections`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SurveyIn"
            examples:
              with_sections:
                description: A survey with sections and questions. This will render in the Prolific Application.
                value:
                  researcher_id: "7172727272"
                  title: A survey with sections and questions
                  sections:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      title: Root vegetables
                      questions:
                        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                          title: What is your favourite root vegetable?
                          type: single
                          answers:
                            - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                              value: Potato
              without_sections:
                description: A survey with questions. This will not render in the Prolific Application.
                value:
                  researcher_id: "7172727272"
                  title: A survey with questions
                  questions:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      title: What is your favourite root vegetable?
                      type: single
                      answers:
                        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                          value: Potato
      responses:
        "201":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SurveyOut"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateSurvey
      security:
        - token: []
  /api/v1/surveys/{survey_id}:
    get:
      tags:
        - Surveys
      summary: Get survey
      description: |-
        Get a single survey given an ID.

      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SurveyOut"
              examples:
                simple_with_sections:
                  description: A simple survey, one section, one question
                  value:
                    _id: 62fcb37ba792097ae2145c6c
                    date_created: "2022-08-17T09:23:07"
                    date_modified: "2022-08-17T09:23:07"
                    researcher_id: 6261321e223a605c7a4f7674
                    title: Do you like ice cream?
                    questions: []
                    sections:
                      - title: Ice cream
                        id: 75ac961f-d94a-4490-af8f-935ca088315f
                        questions:
                          - id: 3797222e-f731-4bea-838b-f668682d902d
                            title: Do you like ice cream?
                            type: single
                            answers:
                              - id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value: Yes
                              - id: a2de5745-b0b4-421b-98ec-23935c78be13
                                value: No
                simple_with_questions:
                  description: A simple survey, one question
                  value:
                    _id: 62fcb37ba792097ae2145c6c
                    date_created: "2022-08-17T09:23:07"
                    date_modified: "2022-08-17T09:23:07"
                    researcher_id: 6261321e223a605c7a4f7674
                    title: Do you like ice cream?
                    sections: []
                    questions:
                      - title: Do you like ice cream?
                        id: 75ac961f-d94a-4490-af8f-935ca088315f
                        type: single
                        answers:
                          - id: c72d8cf9-5429-40ae-ac74-10041ed68824
                            value: Yes
                          - id: a2de5745-b0b4-421b-98ec-23935c78be13
                            value: No
                multi_question:
                  description: Multiple questions
                  value:
                    _id: 62fcb37ba792097ae2145c6c
                    date_created: "2022-08-17T09:23:07"
                    date_modified: "2022-08-17T09:23:07"
                    researcher_id: 6261321e223a605c7a4f7674
                    title: Ice cream deep dive
                    sections:
                      - title: Ice cream
                        id: 75ac961f-d94a-4490-af8f-935ca088315f
                        questions:
                          - id: 3797222e-f731-4bea-838b-f668682d902d
                            title: Do you like ice cream on a cone?
                            type: single
                            answers:
                              - id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value: Yes
                              - id: a2de5745-b0b4-421b-98ec-23935c78be13
                                value: No
                          - id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                            title: What are your favourite flavours?
                            type: multiple
                            answers:
                              - id: de6a49ce-5fa8-4b00-9c5c-89d3add21f2a
                                value: Chocolate
                              - id: 0ba4cf8c-237b-4d26-9be4-b01b7319e9a4
                                value: Vanilla
                              - id: f594ae1-48d2-4453-8488-d7db197b683a
                                value: Strawberry
                              - id: 41af0e8e-59fc-40d7-a2fc-e3b86ebac043
                                value: Mint
                              - id: 8595d4a0-4037-4f90-9ac2-8cab7548866e
                                value: Choc chip
                              - id: be4187ba-49a6-45ca-8e15-57390f5c8e41
                                value: Cookie dough
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetSurvey
      security:
        - token: []
    delete:
      tags:
        - Surveys
      summary: Delete survey
      description: |-
        Delete a single Survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Deleted Survey
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DeleteSurvey
      security:
        - token: []
  /api/v1/surveys/{survey_id}/responses/:
    get:
      tags:
        - Surveys
      summary: Get all responses
      description: |-
        Get all the responses for a given Survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
              examples:
                simple:
                  value:
                    results:
                      - id: 63063d07691a81e96a6e8494
                        date_created: "2022-08-24T15:00:23.325000"
                        date_modified: "2022-08-24T15:00:23.325000"
                        participant_id: "5c83c95d4c266300156edc01"
                        submission_id: 63063cfc71fd74aad90886c4
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream?
                                answers:
                                  - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                    value: Yes
                      - id: 63063d03691a81e96a6e8493
                        date_created: "2022-08-24T15:00:19.478000"
                        date_modified: "2022-08-24T15:00:19.478000"
                        participant_id: "5c83c95d4c266300156edc01"
                        submission_id: 5e0f36b63ccda26295505f0d
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream?
                                answers:
                                  - answer_id: a2de5745-b0b4-421b-98ec-23935c78be13
                                    value: No
                multi_question:
                  value:
                    results:
                      - id: 63063d07691a81e96a6e8494
                        date_created: "2022-08-24T15:00:23.325000"
                        date_modified: "2022-08-24T15:00:23.325000"
                        participant_id: "5c83c95d4c266300156edc01"
                        submission_id: 63063cfc71fd74aad90886c4
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream on a cone?
                                answers:
                                  - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                    value: Yes
                              - question_id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                                question_title: What are your favourite flavours?
                                answers:
                                  - answer_id: de6a49ce-5fa8-4b00-9c5c-89d3add21f2a
                                    value: Chocolate
                                  - answer_id: 41af0e8e-59fc-40d7-a2fc-e3b86ebac043
                                    value: Mint
                                  - answer_id: 8595d4a0-4037-4f90-9ac2-8cab7548866e
                                    value: Choc chip
                      - id: 63063d03691a81e96a6e8493
                        date_created: "2022-08-24T15:00:19.478000"
                        date_modified: "2022-08-24T15:00:19.478000"
                        participant_id: "5c83c95d4c266300156edc01"
                        submission_id: 5e0f36b63ccda26295505f0d
                        sections:
                          - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                            questions:
                              - question_id: 3797222e-f731-4bea-838b-f668682d902d
                                question_title: Do you like ice cream on a cone?
                                answers:
                                  - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                    value: Yes
                              - question_id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                                question_title: What are your favourite flavours?
                                answers:
                                  - answer_id: 0ba4cf8c-237b-4d26-9be4-b01b7319e9a4
                                    value: Vanilla
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetResponses
      security:
        - token: []
    post:
      tags:
        - Surveys
      summary: Create response
      description: |-
        Create a Response for a survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SurveyResponseIn"
            examples:
              with_sections:
                description: A response using sections
                value:
                  participant_id: 62908f0b98a55b36ac68b992
                  submission_id: 62908f0b98a55b36ac68b992
                  sections:
                    - questions:
                        - answers:
                            - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                              value: Potato
                          question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                          question_title: What is your favourite root vegetable?
                      section_id: f5e5c4dc-7d2e-40f1-a895-9bb2f8703fd8
              without_sections:
                description: A survey response using questions
                value:
                  participant_id: 62908f0b98a55b36ac68b992
                  submission_id: 62908f0b98a55b36ac68b992
                  questions:
                    - answers:
                        - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                          value: Potato
                      question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                      question_title: What is your favourite root vegetable?
      responses:
        "201":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SurveyResponseOut"
              examples:
                with_sections:
                  description: A survey response using sections
                  value:
                    _id: 62fccc6ea792097ae2145ca4
                    participant_id: 62908f0b98a55b36ac68b992
                    submission_id: 62908f0b98a55b36ac68b992
                    sections:
                      - questions:
                          - answers:
                              - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                                value: Potato
                            question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                            question_title: What is your favourite root vegetable?
                        section_id: f5e5c4dc-7d2e-40f1-a895-9bb2f8703fd8
                without_sections:
                  description: A survey response using questions
                  value:
                    _id: 62fccc6ea792097ae2145ca4
                    participant_id: 62908f0b98a55b36ac68b992
                    submission_id: 62908f0b98a55b36ac68b992
                    questions:
                      - answers:
                          - answer_id: 8bde0c5f-235e-41e6-bf82-b73e92852ac8
                            value: Potato
                        question_id: 827e810a-4b1a-40f6-8bc2-c3dd6fcedc25
                        question_title: What is your favourite root vegetable?
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateResponse
      security:
        - token: []
    delete:
      tags:
        - Surveys
      summary: Delete all responses
      description: |-
        Delete all the responses for a given Survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Deleted
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DeleteResponses
      security:
        - token: []
  /api/v1/surveys/{survey_id}/responses/{response_id}:
    get:
      tags:
        - Surveys
      summary: Get response
      description: |-
        Get a single response for a survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
        - name: response_id
          in: path
          required: true
          schema:
            title: Response Id
            type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SurveyResponseOut"
              examples:
                simple:
                  value:
                    _id: 63063d07691a81e96a6e8494
                    date_created: "2022-08-24T15:00:23.325000"
                    date_modified: "2022-08-24T15:00:23.325000"
                    participant_id: "5c83c95d4c266300156edc01"
                    submission_id: 63063cfc71fd74aad90886c4
                    sections:
                      - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                        questions:
                          - question_id: 3797222e-f731-4bea-838b-f668682d902d
                            question_title: Do you like ice cream?
                            answers:
                              - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value: Yes
                multi_question:
                  value:
                    _id: 63063d07691a81e96a6e8494
                    date_created: "2022-08-24T15:00:23.325000"
                    date_modified: "2022-08-24T15:00:23.325000"
                    participant_id: "5c83c95d4c266300156edc01"
                    submission_id: 63063cfc71fd74aad90886c4
                    sections:
                      - section_id: 75ac961f-d94a-4490-af8f-935ca088315f
                        questions:
                          - question_id: 3797222e-f731-4bea-838b-f668682d902d
                            question_title: Do you like ice cream on a cone?
                            answers:
                              - answer_id: c72d8cf9-5429-40ae-ac74-10041ed68824
                                value: Yes
                          - question_id: 672f8154-3506-4b52-a46c-3bc67bade4b2
                            question_title: What are your favourite flavours?
                            answers:
                              - answer_id: de6a49ce-5fa8-4b00-9c5c-89d3add21f2a
                                value: Chocolate
                              - answer_id: 41af0e8e-59fc-40d7-a2fc-e3b86ebac043
                                value: Mint
                              - answer_id: 8595d4a0-4037-4f90-9ac2-8cab7548866e
                                value: Choc chip
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetResponse
      security:
        - token: []
    delete:
      tags:
        - Surveys
      summary: Delete a response
      description: |-
        Delete a single Response.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
        - name: response_id
          in: path
          required: true
          schema:
            title: Response Id
            type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Deleted
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DeleteResponse
      security:
        - token: []
  /api/v1/surveys/{survey_id}/responses/summary/:
    get:
      tags:
        - Surveys
      summary: Get summary of responses
      description: |-
        Get an aggregated summary of responses for a given survey.
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            title: Survey Id
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SurveySummary"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetSummary
      security:
        - token: []
  /api/v1/participant-groups/:
    get:
      tags:
        - Participant Groups
      summary: Get a list of all participant groups within a project or workspace
      parameters:
        - name: active
          in: query
          description: Filter by the active (not deleted) status of the participant group.
          required: false
          schema:
            type: string
            enum:
              - "true"
              - "false"
        - in: query
          name: filter
          required: true
          schema:
            oneOf:
              - properties:
                  workspace_id:
                    type: string
                    description: The id of the workspace to get participant groups for
                required:
                  - workspace_id
                title: "Workspace ID"
              - properties:
                  project_id:
                    deprecated: true
                    type: string
                    description: The id of the project to get participant groups for
                required:
                  - project_id
                title: "Project ID"
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantGroupListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetParticipantGroups
      security:
        - token: []
    post:
      tags:
        - Participant Groups
      summary: Create a new participant group within a workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                workspace_id:
                  type: string
                  description: The id of the workspace to create the participant group in. Either a workspace or organisation ID must be specified.
                organisation_id:
                  type: string
                  description: The id of the organisation to create the participant group in. Either a workspace or organisation ID must be specified.
                name:
                  type: string
                  description: The name of the participant group
                  example: Group 1
                description:
                  type: string
                  description: A description of the participant group
                  example: Participants with confirmed special dietary requirements.
                participant_ids:
                  type: array
                  description: The ids of participants to be initially added to the group
                  items:
                    type: string
                  example:
                    [
                      "5e9b9c9b0f9c9a0001b0b1f4",
                      "5e9b9c9b0f9c9a0001b0b1f5",
                      "5e9b9c9b0f9c9a0001b0b1f6",
                    ]
            examples:
              create_a_participant_group:
                summary: "Create a participant group"
                value:
                  workspace_id: 5e9b9c9b0f9c9a0001b1ca2f
                  name: Group 1
                  description: Participants with confirmed special dietary requirements.
              create_a_participant_group_with_participants:
                summary: "Create a participant group with participants"
                value:
                  workspace_id: 5e9b9c9b0f9c9a0001b1ca2f
                  name: Group 1
                  description: Participants with confirmed special dietary requirements.
                  participant_ids:
                    [
                      "5e9b9c9b0f9c9a0001b0b1f4",
                      "5e9b9c9b0f9c9a0001b0b1f5",
                      "5e9b9c9b0f9c9a0001b0b1f6",
                    ]
      responses:
        "201":
          description: "Participant group created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantGroupResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateParticipantGroup
      security:
        - token: []
  /api/v1/participant-groups/{id}/:
    get:
      tags:
        - Participant Groups
      summary: Get a participant group
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the participant group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantGroupResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetParticipantGroup
      security:
        - token: []
    patch:
      tags:
        - Participant Groups
      summary: Update a participant group
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the participant group
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantGroupUpdate"
            examples:
              update_participant_group_name:
                value:
                  name: Passed all attention checks
              update_participant_group_description:
                value:
                  description: Participants who passed all attention checks
              overwrite_participant_group_participants:
                value:
                  participant_ids:
                    [
                      "5e9b9c9b0f9c9a0001b0b1f4",
                      "5e9b9c9b0f9c9a0001b0b1f5",
                      "5e9b9c9b0f9c9a0001b0b1f6",
                    ]
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantGroupResponse"
              example:
                id: 642ea7ff7639ab670b05a0b5
                name: Passed all attention checks
                description: Participants who passed all attention checks
                project_id: null
                workspace_id: 5e9b9c9b0f9c9a0001b1ca2f
                participant_count: 0
                feeder_studies: []
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: UpdateParticipantGroup
      security:
        - token: []
    delete:
      tags:
        - Participant Groups
      summary: Delete a participant group
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The id of the participant group
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DeleteParticipantGroup
      security:
        - token: []
  /api/v1/participant-groups/{id}/participants/:
    get:
      tags:
        - Participant Groups
      summary: Get a list of all participants within a participant group
      parameters:
        - name: id
          in: path
          description: The id of the participant group to get participants for
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Request successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantGroupMembershipListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetParticipantGroupParticipants
      security:
        - token: []
    post:
      tags:
        - Participant Groups
      summary: Add participants to a participant group
      description: |
        Append participants to a participant group if they are not already members. If a participant is already a member of the group, they will be ignored.
      parameters:
        - name: id
          in: path
          description: The id of the participant group to add the participant to
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantIDList"
            examples:
              add_multiple_participants_to_a_participant_group:
                summary: "Add multiple participants to a participant group"
                value:
                  participant_ids:
                    [
                      "5e9b9c9b0f9c9a0001b0b1f4",
                      "5e9b9c9b0f9c9a0001b0b1f5",
                      "5e9b9c9b0f9c9a0001b0b1f6",
                    ]
      responses:
        "200":
          description: "All participant(s) now in participant group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantGroupMembershipListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: AddToParticipantGroup
      security:
        - token: []
    delete:
      tags:
        - Participant Groups
      summary: Remove participants from a participant group
      description: |
        Remove specified participants from a participant group if they are members. If a participant is not a member of the group, they will be ignored.
      parameters:
        - name: id
          in: path
          description: The id of the participant group to remove the participant(s) from
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantIDList"
            examples:
              remove_multiple_participants_from_a_participant_group:
                summary: "Remove multiple participants from a participant group"
                value:
                  participant_ids:
                    [
                      "5e9b9c9b0f9c9a0001b0b1f4",
                      "5e9b9c9b0f9c9a0001b0b1f5",
                      "5e9b9c9b0f9c9a0001b0b1f6",
                    ]
      responses:
        "200":
          description: "All participant(s) now in participant group"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantGroupMembershipListResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: RemoveFromParticipantGroup
      security:
        - token: []
  /api/v1/invitations/:
    post:
      tags:
        - Invitations
      summary: Create a new invitation
      description: |
        Initiate a new invitation process for adding users to a Workspace or Project.

        This operation can be performed only by authenticated users who are admins for the specified workspace. Invitations will be sent to the email addresses provided in the request.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInvitationRequest"
      responses:
        "201":
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateInvitationResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateInvitation
      security:
        - token: []
  /api/v1/filters/:
    get:
      tags:
        - Filters
      summary: List all filters
      description: List all filters that can be applied to your filter sets or studies.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: detailed
          in: query
          description: Include extra information required to sort and categorise filters in the Prolific app. This is not required for API use. Default false.
          required: false
          schema:
            type: string
        - name: workspace_id
          in: query
          description: The workspace ID for the workspace you are creating a study or filterset in. This is used to get contextual data such as previous studies and participant groups.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of filters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilterList"
              examples:
                filter_list:
                  value:
                    results:
                      - filter_id: handedness
                        title: Handedness
                        description: Whether a person is left or right-handed.
                        question: Are you left or right-handed?
                        type: select
                        data_type: ChoiceID
                        choices:
                          0: Right-handed
                          1: Left-handed
                          2: Ambidextrous
                      - filter_id: previous_studies
                        title: Previous Studies AllowList
                        description: Select one or more studies to allow participants who have completed them to participate in this study.
                        type: select
                        data_type: StudyID
                        choices:
                          645e4403bdd06d5f66d8fbd5: Study 1 internal name
                          645e4403bdd06d5f66d8fbd8: Study 2 internal name
                          645e4403bdd06d5f66d8fbdb: Study 3 internal name
                      - filter_id: custom_allowlist
                        title: Custom AllowList
                        description: Select one or more participant ID's to allow participants to complete this study.
                        type: select
                        data_type: ParticipantID
                        choices:
                          "0": Add a list of participant ID's to create an allowlist filter.
                      - filter_id: age
                        title: Age
                        question: How old are you?
                        description: ""
                        type: range
                        data_type: integer
                        min: 18
                        max: 100
                      - filter_id: joined_between
                        title: Joined Between
                        description: "Allow participants who joined between the specified dates to participate in this study."
                        type: range
                        data_type: date
                        min: "2020-01-01"
                        max: "2021-01-01"
                filter_list_detailed:
                  value:
                    results:
                      - filter_id: handedness
                        title: Handedness
                        description: Whether a person is left or right-handed.
                        question: Are you left or right-handed?
                        type: select
                        data_type: integer
                        choices:
                          0: Right-handed
                          1: Left-handed
                          2: Ambidextrous
                        researcher_help_text: ""
                        participant_help_text: ""
                        category: Other
                        subcategory: ""
                        display_order: 1
                        tags: []
                      - filter_id: age
                        title: Age
                        description: ""
                        question: How old are you?
                        type: range
                        data_type: integer
                        min: 18
                        max: 100
                        researcher_help_text: ""
                        participant_help_text: ""
                        category: Demographics
                        subcategory: ""
                        display_order: 2
                        tags:
                          - recommended
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetFilters
      security:
        - token: []
  /api/v1/filter-sets/:
    get:
      tags:
        - Filter Sets
      summary: List all filter sets
      description: List of all filter sets in the specified workspace.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: workspace_id
          in: query
          description: ID of the workspace to get filter sets for.
          schema:
            type: string
        - name: organisation_id
          in: query
          description: ID of the organisation to get filter sets for.
          schema:
            type: string
      responses:
        "200":
          description: List of filter sets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilterSetList"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetFilterSets
      security:
        - token: []
    post:
      tags:
        - Filter Sets
      summary: Create filter set
      description: Create a filter set from a list of filters
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFilterSet"
            examples:
              ambidextrous_teenagers:
                value:
                  workspace_id: 644aaabfaf6bbc363b9d47c6
                  name: Ambidextrous teenagers
                  filters:
                    - filter_id: handedness
                      selected_values:
                        - "1"
                    - filter_id: age
                      selected_range:
                        lower: 19
                        upper: 22
      responses:
        "201":
          description: Filter set created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FilterSet"
                  - $ref: "#/components/schemas/FilterSetParticipantCount"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CreateFilterSet
      security:
        - token: []
  /api/v1/filter-sets/{id}/:
    get:
      tags:
        - Filter Sets
      summary: Get filter set
      description: Get details of a filter set.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the filter set.
          required: true
          schema:
            type: string
        - name: version_number
          in: query
          description: Allows you to specify a specific version of the filter set to retrieve.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Filter set details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FilterSet"
                  - $ref: "#/components/schemas/FilterSetParticipantCount"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetFilterSet
      security:
        - token: []
    patch:
      tags:
        - Filter Sets
      summary: Update filter set
      description: Update the details of a filter set.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the filter set.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFilterSet"
      responses:
        "200":
          description: Filter set updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FilterSet"
                  - $ref: "#/components/schemas/FilterSetParticipantCount"
              example:
                id: 644ab312af6bbc363b9d47c7
                workspace_id: 644aaabfaf6bbc363b9d47c6
                name: Left-handed 30-somethings
                filters:
                  - filter_id: handedness
                    selected_values:
                      - "1"
                  - filter_id: age
                    selected_range:
                      lower: 30
                      upper: 39
                eligible_participant_count: 123
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: UpdateFilterSet
      security:
        - token: []
    delete:
      tags:
        - Filter Sets
      summary: Delete filter set
      description: Delete a filter set.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the filter set.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted the filter set
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: DeleteFilterSet
      security:
        - token: []
  /api/v1/filter-sets/{id}/clone/:
    post:
      tags:
        - Filter Sets
      summary: Clone filter set
      description: Create a copy of a filter set.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the filter set.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_name:
                  type: string
                  description: A new name for the cloned filter set.
      responses:
        "201":
          description: Filter set cloned
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FilterSet"
                  - $ref: "#/components/schemas/FilterSetParticipantCount"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: CloneFilterSet
      security:
        - token: []
  /api/v1/filter-sets/{id}/lock/:
    post:
      tags:
        - Filter Sets
      summary: Lock filter set for editing
      description: Lock the filter set for editing.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the filter set.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Filter set locked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FilterSet"
                  - $ref: "#/components/schemas/FilterSetParticipantCount"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: LockFilterSet
      security:
        - token: []
  /api/v1/filter-sets/{id}/unlock/:
    post:
      tags:
        - Filter Sets
      summary: Unlock filter set for editing
      description: Unlock the filter set for editing.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: ID of the filter set.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Filter set locked
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/FilterSet"
                  - $ref: "#/components/schemas/FilterSetParticipantCount"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: UnlockFilterSet
      security:
        - token: []
  /api/v1/eligibility-count/:
    post:
      tags:
        - Filters
      summary: Count participants
      description: |-
        Count how many participants meet all the given filters.
        Only participants that pass **every one** of the filters are counted.
        Zero means that there are less than 25 participants. We do not show lower numbers to protect the privacy of the participants.

        To see a list of filters that may be passed to this endpoint, see the documentation for filters.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequirementsCountRequest"
            examples:
              empty_requirements:
                value:
                  filters: []
                  workspace_id: 645e4403bdd06d5f66d8fbd8
              filters_requirements_request:
                value:
                  filters:
                    - filter_id: "favourite_colour"
                      selected_values:
                        - "0"
                        - "1"
                    - filter_id: "previous_studies_allowlist"
                      selected_values:
                        - "645e4403bdd06d5f66d8fbde"
                        - "645e4403bdd06d5f66d8fbdf"
                    - filter_id: "approval_rate"
                      selected_range:
                        lower: 10
                        upper: 80
                  workspace_id: 645e4403bdd06d5f66d8fbd8
        required: false
      responses:
        "200":
          description: Count
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequirementsCount"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: GetEligibleCount
      security:
        - token: []
      x-codegen-request-body-name: requirements
    x-summary: Count participants

  /api/v1/study-collections/mutually-exclusive/:
    get:
      security:
        - token: []
      operationId: ListMutuallyExclusiveStudyCollections
      tags:
        - Study Collections
      summary: List mutually exclusive study collections in a project
      description: List studies
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: project_id
          in: query
          required: true
          schema:
            type: string
          example: 65786062db3b35bcbeb07bcc
      responses:
        "200":
          description: List of mutually exclusive study collections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionsResponse"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - token: []
      operationId: CreateMutuallyExclusiveStudyCollection
      tags:
        - Study Collections
      summary: |-
        Create a mutually exclusive study collection.
      description: |-
        Create a mutually exclusive study collection.
        - Studies and study collections must be created separately and then added to the mutually exclusive study collection.
        - Both the studies and the study collection must be in the same project.
        - You can only add draft studies to a mutually exclusive study collection.
        - Adding studies which are already in one study collection to another study
        collection will remove the study from the original study collection.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionCreate"
            examples:
              create_without_studies:
                value:
                  name: My Mutually Exclusive Study Collection
                  description: This is a description of my mutually exclusive study collection
                  project_id: 65786062db3b35bcbeb07bcc
              create_with_studies:
                value:
                  name: My Mutually Exclusive Study Collection
                  description: This is a description of my mutually exclusive study collection
                  project_id: 65786062db3b35bcbeb07bcc
                  study_ids:
                    - 5f7b9a7b5f7b9a7b5f7b9a7b
                    - 5f7b9a7b5f7b9a7b5f7b9a6b
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionList"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-codegen-request-body-name: study
  /api/v1/study-collections/mutually-exclusive/{id}/:
    get:
      security:
        - token: []
      operationId: GetMutuallyExclusiveStudyCollection
      tags:
        - Study Collections
      summary: Get a mutually exclusive study collection
      description: Get a mutually exclusive study collection
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Mutually exclusive study collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionDetail"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      security:
        - token: []
      operationId: UpdateMutuallyExclusiveStudyCollection
      tags:
        - Study Collections
      summary: Update a mutually exclusive study collection
      description: Update a mutually exclusive study collection
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionUpdate"
            examples:
              update_name:
                value:
                  name: My Mutually Exclusive Study Collection
              update_description:
                value:
                  description: This is a description of my mutually exclusive study collection
              update_studies:
                value:
                  study_ids:
                    - 5f7b9a7b5f7b9a7b5f7b9a7b
                    - 5f7b9a7b5f7b9a7b5f7b9a6b
      responses:
        "200":
          description: Mutually exclusive study collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionDetail"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - token: []
      operationId: DeleteMutuallyExclusiveStudyCollection
      tags:
        - Study Collections
      summary: Delete a mutually exclusive study collection
      description: |-
        Delete a mutually exclusive study collection. This will not delete the studies in the collection.
        - This can only be completed if the study collection is unpublished.
        - This will not delete the studies in the collection.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/study-collections/mutually-exclusive/{id}/transition/:
    post:
      security:
        - token: []
      operationId: TransitionMutuallyExclusiveStudyCollection
      tags:
        - Study Collections
      summary: Transition a mutually exclusive study collection
      description: |-
        Transition a mutually exclusive study collection. This is used to:
        - Publish a study collection
        - Cancel publish a study collection
        - Schedule publish a study collection
          - This can be done by setting the publish_at on the study collection at create or patch, then transitioning with the "SCHEDULE_PUBLISH" action
          - Or optionally the publish_at can be provided directly in the body of the transition request
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - PUBLISH
                    - SCHEDULE_PUBLISH
                    - CANCEL_PUBLISH
                publish_at:
                  type: string
                  description: Optional parameter for scheduling publish, indicating the datetime and timezone the study collection should be scheduled to be published at
            examples:
              publish:
                value:
                  action: PUBLISH
              cancel_publish:
                value:
                  action: CANCEL_PUBLISH
              schedule_publish_time_already_set_on_collection:
                value:
                  action: SCHEDULE_PUBLISH
              schedule_publish_time_set_in_request:
                value:
                  action: SCHEDULE_PUBLISH
                  publish_at: 2050-02-28T13:45:00 Europe/London
      responses:
        "200":
          description: Mutually exclusive study collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionDetail"
        "4XX":
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    ProjectShortListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: List of all projects for a user
          items:
            $ref: "#/components/schemas/ProjectShort"
    ProjectShort:
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        id:
          type: string
          description: Project id. It is created by Prolific.
        title:
          type: string
          description: Name of project
        description:
          type: string
          description: What is this project used for
        owner:
          type: string
          description: User id of the creator of the project. It is created by Prolific.
        users:
          type: array
          description: Data for all users who have access to this project
          items:
            $ref: "#/components/schemas/WorkspaceUser"
        naivety_distribution_rate:
          type: number
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: The rate at which the studies within this project are distributed.
      example:
        id: 62fce6fff0a78eb4f3ebc09c
        title: My project
        description: This project is for...
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73
            name: Joe Soap
            email: joe.soap@gmail.com
            roles: ["PROJECT_EDITOR"]
        naivety_distribution_rate: 0.5
    Project:
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        id:
          type: string
          description: Project id. It is created by Prolific.
        title:
          type: string
          description: Name of project
        description:
          type: string
          description: What is this project used for
        owner:
          type: string
          description: User id of the creator of the project. It is created by Prolific.
        users:
          type: array
          description: Data for all users who have access to this project
          items:
            $ref: "#/components/schemas/WorkspaceUser"
        workspace:
          type: string
          description: Id of the workspace this project is in. This is created by Prolific.
        naivety_distribution_rate:
          type: number
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: The rate at which the studies within this project are distributed.
      example:
        id: 62fce6fff0a78eb4f3ebc09c
        title: My project
        description: This project is for...
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73
            name: Joe Soap
            email: joe.soap@gmail.com
            roles: ["PROJECT_EDITOR"]
        workspace: 60a42f4c693c29420793cb73
        naivety_distribution_rate: 0.5
    WorkspacesListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: List of all workspaces for user
          items:
            $ref: "#/components/schemas/WorkspaceShort"
    WorkspaceShort: # might need to differentiate between Workspace list and get data
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        id:
          type: string
          description: Workspace id. It is created by Prolific.
        title:
          type: string
          description: Name of workspace
        description:
          type: string
          description: What is this workspace used for
        owner:
          type: string
          description: User id of the creator of the workspace. It is created by Prolific.
        users:
          type: array
          description: Data for all users who have access to this workspace
          items:
            $ref: "#/components/schemas/WorkspaceUser"
        naivety_distribution_rate:
          type: number
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: The rate at which the studies within this project are distributed.
      example:
        id: 62fce6fff0a78eb4f3ebc09c
        title: My workspace
        description: This workspace does...
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73
            name: Joe Soap
            email: joe.soap@gmail.com
            roles: ["WORKSPACE_ADMIN"]
        naivety_distribution_rate: 0.5
    Workspace: # might need to differentiate between Workspace list and get data
      additionalProperties: true
      required:
        - id
        - title
      type: object
      properties:
        id:
          type: string
          description: Workspace id. It is created by Prolific.
        title:
          type: string
          description: Name of workspace
        description:
          type: string
          description: What is this workspace used for
        owner:
          type: string
          description: Workspace id. It is created by Prolific.
        users:
          type: array
          description: Data for a user related to a workspace
          items:
            $ref: "#/components/schemas/WorkspaceUser"
        projects:
          type: array
          description: Data for a project related to a workspace
          items:
            $ref: "#/components/schemas/ProjectShort"
        wallet:
          type: string
          description: Wallet tied to workspace
        naivety_distribution_rate:
          type: number
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: The rate at which the studies within this workspace are distributed.
      example:
        id: 62fce6fff0a78eb4f3ebc09c
        title: My workspace
        description: This workspace does...
        owner: 60a42f4c693c29420793cb73
        users:
          - id: 60a42f4c693c29420793cb73
            name: Joe Soap
            email: joe.soap@gmail.com
            roles: ["WORKSPACE_ADMIN"]
        projects:
          - id: 60a42f4c693c29420793cb73
        wallet: 61a65c06b084910b3f0c00d6
    WorkspaceUser:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Id of user
        name:
          type: string
          description: Name of user
        email:
          type: string
          description: email of user
        roles:
          type: array
          description: User roles in workspace
          items:
            type: string
    CreateWorkspace:
      required:
        - title
      type: object
      properties:
        title:
          type: string
          description: Name of workspace
        naivety_distribution_rate:
          type: number
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: |-
            Control the balance between speed of your studies and the naivety of the participants.

            If not defined, by default Prolific calculates the best rate for most studies
            taking into account the `filters` and the `total_available_places` needed for this study.

            Use 0 if your priority is speed. When this property is set to 0 all eligible participants will have access
            to your study at the same time, without any prioritization.

            You can also set this at a project and study level.
        currency_code:
          type: string
          description: Currency used for all transactions within the workspace. Must be GBP or USD.
    CreateProject:
      required:
        - title
      type: object
      properties:
        title:
          type: string
          description: Name of project
        naivety_distribution_rate:
          type: number
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: |-
            Control the balance between speed of your studies and the naivety of the participants.

            If not defined, by default Prolific calculates the best rate for most studies
            taking into account the `filters` and the `total_available_places` needed for this study.

            Use 0 if your priority is speed. When this property is set to 0 all eligible participants will have access
            to your study at the same time, without any prioritization.

            You can also set this at a workspace and study level.
    Error:
      required:
        - error
      type: object
      additionalProperties: true
      properties:
        error:
          $ref: "#/components/schemas/ErrorDetail"
    ErrorDetail:
      additionalProperties: false
      required:
        - status
        - error_code
        - title
        - detail
      type: object
      properties:
        status:
          type: integer
          description: Status code as in the http standards
        error_code:
          type: integer
          description: Internal error code
        title:
          type: string
          description: Error title
        detail:
          anyOf:
            - type: string
              description: Error message
            - type: array
              description: Error messages
            - type: object
              description: All fields with validation errors
              additionalProperties: true
              properties:
                any_field:
                  description: Name of the field with a validation error and as a value an array with the error descriptions
                  type: array
                  items:
                    type: string
                    description: Error message for that field
          description: Error detail
        additional_information:
          type: string
          description: Optional extra information
        traceback:
          type: string
          description: Optional debug information
        interactive:
          type: boolean
    User:
      additionalProperties: true
      required:
        - email
        - id
      type: object
      properties:
        id:
          type: string
        email:
          type: string
    StudiesListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: List of all studies matching the criteria.
          items:
            $ref: "#/components/schemas/StudyShort"
    StudyShort:
      additionalProperties: true
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: Study id. It is created by Prolific.
        name:
          type: string
          description: Public name or title of the study
        internal_name:
          type: string
          nullable: true
          description: Internal name of the study, not shown to participants
        status:
          type: string
          readOnly: true
          enum:
            - UNPUBLISHED
            - SCHEDULED
            - ACTIVE
            - AWAITING REVIEW
            - PAUSED
            - COMPLETED
          description: Status of the study.
        study_type:
          type: string
          enum:
            - SINGLE
            - UK_REP_SAMPLE
            - US_REP_SAMPLE
          description: Deprecated. Type of study.
        total_available_places:
          type: number
          description: How many participants are you looking to recruit
        places_taken:
          type: number
          readOnly: true
          description: Places already taken, number of submission started excluding timed out and returned submissions
        number_of_submissions:
          type: number
          readOnly: true
        reward:
          type: number
          description: How much are you going to pay the participants in cents.
            We use the currency of your account
        total_cost:
          type: number
          description: Total cost of the study including fees
        published_at:
          type: string
          nullable: true
          format: date-time
          description: Date time when the study was published.
        publish_at:
          type: string
          nullable: true
          format: date-time
          description: Date time when the study was scheduled to be published.
        date_created:
          type: string
          format: date-time
          description: Date time when the study was created
      example:
        id: 60d9aadeb86739de712faee0
        name: Study about API's
        status: UNPUBLISHED
    BaseStudy:
      type: object
      properties:
        name:
          type: string
          description: Public name or title of the study
        internal_name:
          type: string
          nullable: true
          description: Internal name of the study, not shown to participants
        description:
          type: string
          description: |-
            Description of the study for the participants to read before
            starting the study
        external_study_url:
          type: string
          description: |-
            URL of the survey or experiment you want participant to access. You can pass URL search parameters to your survey or experiment

            * Participant id {{%PROLIFIC_PID%}}
            * Study id {{%STUDY_ID%}}
            * Session id {{%SESSION_ID%}}

            For example `https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}`
        prolific_id_option:
          type: string
          enum:
            - question
            - url_parameters
            - not_required
          description: |-
            Use 'question' if you will add a question in your survey or experiment asking the participant ID

            **Recommended** Use 'url_parameters' if your survey or experiment can retrieve and store those parameters for your analysis.

            Use 'not_required' if you don't need to record them
        completion_codes:
          description: |-
            Specify at least one completion code for your study. A participant will enter one of these codes when they complete your study.

            Each code must be unique within a study.

            You can specify as many actions as you like per code.
          type: array
          items:
            type: object
            required:
              - code
              - code_type
              - actions
            properties:
              code:
                type: string
                nullable: true
                description: |
                  The code the participant will either enter manually at the end of your study or be redirected as part of the return URL.

                  If the code is null, then the participant will not be asked to submit a completion code when they return to Prolific.
                  Null codes can only be provided when:
                    - The actor is "participant"
                    - There are no other completion codes with the "participant" actor
                    - The actions array is empty

                  The code must be unique within the study.

              code_type:
                type: string
                description: A name for your code to make it easier to understand its intention. Either use one of the predefined options or any other free text.
                enum:
                  - "COMPLETED"
                  - "FAILED_ATTENTION_CHECK"
                  - "FOLLOW_UP_STUDY"
                  - "GIVE_BONUS"
                  - "INCOMPATIBLE_DEVICE"
                  - "NO_CONSENT"
                  - "OTHER"
              actions:
                type: array
                description: |-
                  The actions that will be completed automatically when the submission is completed with this code.

                  You can specify as many actions as you like. For a basic approach where all submissions are left for manual approval, set the `{"action": "MANUALLY_REVIEW"}` option only..
                items:
                  anyOf:
                    - $ref: "#/components/schemas/AutomaticallyApprove"
                    - $ref: "#/components/schemas/AddToParticipantGroup"
                    - $ref: "#/components/schemas/RemoveFromParticipantGroup"
                    - $ref: "#/components/schemas/ManuallyReview"
                    - $ref: "#/components/schemas/RequestReturn"
              actor:
                type: string
                enum:
                  - "participant"
                  - "researcher"
                default: participant
                description: The actor that can provide this completion code.
        total_available_places:
          type: number
          description: How many participants are you looking to recruit
        estimated_completion_time:
          type: number
          minimum: 1
          description: Estimated duration in minutes of the experiment or survey
        maximum_allowed_time:
          type: number
          description: |-
            Max time in minutes for a participant to finish the submission. Submissions are timed out if it takes longer.

            If it is not provided the default value is set to the max value.

            The min value is calculated as two minutes plus two times the estimated time plus two times the square root of the estimated time
        reward:
          type: number
          description: |-
            How much are you going to pay the participants in cents. We
            use the currency of your account.
        device_compatibility:
          type: array
          description: |-
            Add all devices that participants can use.
            You can include one or more options.

            An empty array indicates that all options are available.
          items:
            type: string
            enum:
              - desktop
              - tablet
              - mobile
        peripheral_requirements:
          type: array
          description: |-
            Add all requirements that participants have to meet.

            An empty array indicates that there are no extra peripheral requirements.
          items:
            type: string
            enum:
              - audio
              - camera
              - download
              - microphone
        filters:
          type: array
          nullable: true
          description: |-
            Array of filters.

            Use empty array for "Everyone"
          items:
            anyOf:
              - $ref: "#/components/schemas/SelectFilter"
              - $ref: "#/components/schemas/RangeFilter"
        filter_set_id:
          type: string
          nullable: true
          description: |-
            The ID of a filter set, from which filters for the study will be taken.

            Note, this cannot be used in combination with additional filters via the `filters` field.
        filter_set_version:
          type: integer
          nullable: true
          description: |-
            The version of the filter set to be used.

            If not provided, this will default to the latest available version at the time of applying the filter set.
        naivety_distribution_rate:
          type: number
          nullable: true
          minimum: 0.0
          maximum: 1.0
          description: |-
            Control the balance between speed of your studies and the naivety of the participants.

            If not defined, by default Prolific calculates the best rate for most studies
            taking into account the `filters` and the `total_available_places` needed for this study.

            Use 0 if your priority is speed. When this property is set to 0 all eligible participants will have access
            to your study at the same time, without any prioritization.

            You can also set this at a workspace and project level.
        project:
          type: string
          description: |-
            Project id, this is optional and if not supplied with be the put in the default workspace and project.
        submissions_config:
          type: object
          description: |-
            **Advanced**: This helps with faster data collection. Your survey system will need to handle providing a
            unique experience each time the participant takes the study.

            Configuration related to study submissions. The purpose of this field is to capture any configuration options that impact the submissions made by participants in a study.
          additionalProperties: true
          properties:
            max_submissions_per_participant:
              type: integer
              default: 1
              nullable: true
              description: |-
                - **1** is the default Prolific experience. This means one submission, per participant, per study. If you do
                  not specify this field, the **default is 1**.
                - **1+** turns your study into a multi-submission study, meaning a participant can create many submissions per study.
                  As noted above, your survey system will need to handle providing a
                unique experience each time the participant takes the study.
                - **-1** will allow an indefinite number of submissions from a single participant, up to `total_available_places`.
            max_concurrent_submissions:
              type: integer
              default: -1
              nullable: true
              description: |-
                - **-1** is the default value, meaning unlimited concurrent active/reserved submissions per study.
                - **1+** limits the number of concurrent active/reserved submissions a study can have at one time.
        study_labels:
          type: array
          description: |-
            This field allows you to tag studies with information about the type/topic of the study and the kind of work involved in completing it.

            We plan to make this information available to participants for easier self-selection. At present these options are mutually exclusive and only a single option can be selected, however in the future available categories will expand.
          items:
            type: string
            enum:
              - survey
              - writing_task
              - annotation
              - interview
              - other
        content_warnings:
          type: array
          items:
            type: string
            enum:
              - sensitive
              - explicit
          description: |-
            Allow researchers to define content warnings for their study.

            At present these options are mutually exclusive and only a single option can be selected, however in the future available warnings will expand.
        content_warning_details:
          type: string
          description: |-
            Allow researchers to add further details about their content warning.
        metadata:
          type: string
          nullable: true
          description: |-
            This field can be used to store extra information required for a system integration.
            For example, it could be some JSON, XML, an integer, or a string.

            Examples could include:

              - `123345` - An ID from your system, that helps with linkage when returning the study.
              - `{ \"id\": \"45\", \"type\": \"finance\"}` - Some JSON that you want to store.
        access_details:
          type: array
          nullable: true
          description: |-
            Array of access_details, which integrates with taskflow.

            While this field is nullable, you must provide one of `access_details` or `external_study_url`.

            The sum of all access_details must add to the `total_available_places` field, however the values can be different for an individual access_detail.
          items:
            anyOf:
              - $ref: "#/components/schemas/AccessDetail"
    CreateStudy:
      allOf:
        - $ref: "#/components/schemas/BaseStudy"
        - required:
            - name
            - description
            - external_study_url
            - prolific_id_option
            - completion_codes
            - estimated_completion_time
            - reward
            - total_available_places
    Study:
      additionalProperties: true
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Study id. It is created by Prolific. **Read only**.
            status:
              type: string
              enum:
                - UNPUBLISHED
                - SCHEDULED
                - ACTIVE
                - AWAITING REVIEW
                - PAUSED
                - COMPLETED
              readOnly: true
              description: |-
                Status of the study. **Read only**.

                To change the status you can use `/api/v1/studies/{id}/transition/`
        - $ref: "#/components/schemas/CreateStudy"
        - required:
            - id
            - status
            - maximum_allowed_time
      example:
        id: 60d9aadeb86739de712faee0
        name: Study about API's
        internal_name: WIT-2021 Study about API's version 2
        description: This study aims to determine how to make a good public API
        external_study_url: https://eggs-experriment.com?participant={{%PROLIFIC_PID%}}
        prolific_id_option: url_parameters
        completion_codes:
          - code: "ABC123"
            code_type: "COMPLETED"
            actions:
              - action: "AUTOMATICALLY_APPROVE"
          - code: "DEF234"
            code_type: "FOLLOW_UP_STUDY"
            actions:
              - action: "AUTOMATICALLY_APPROVE"
              - action: "ADD_TO_PARTICIPANT_GROUP"
                participant_group: "619e049f7648a4e1f8f3645b"
        total_available_places: 30
        estimated_completion_time: 5
        maximum_allowed_time: 25
        reward: 100
        device_compatibility:
          - desktop
        peripheral_requirements: []
        filters: []
        filter_set_id: null
        filter_set_version: null
        status: UNPUBLISHED
        study_labels: ["interview"]
        content_warnings: ["sensitive"]
        content_warning_details: Experiences with hateful activities, experiences with self-injury and harmful behaviour
    StudyTransition:
      required:
        - action
      type: object
      properties:
        action:
          type: string
          description: Action to execute
          example: PUBLISH
    SubmissionListResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: List of all studies matching the criteria.
          items:
            $ref: "#/components/schemas/SubmissionShort"
    SubmissionShort:
      additionalProperties: true
      required:
        - id
        - started_at
        - participant_id
        - status
        - has_siblings
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Submission id.
        participant_id:
          type: string
          description: Participant id.
        status:
          type: string
          enum:
            - RESERVED
            - ACTIVE
            - TIME-OUT
            - AWAITING REVIEW
            - APPROVED
            - RETURNED
            - REJECTED
            - SCREENED OUT
          readOnly: true
          description: Status of the submission.
        started_at:
          type: string
          format: date-time
          description: Date started
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: Date completed
        has_siblings:
          type: boolean
          description: Whether or not the submission has sibling submissions (sharing the same study).
        study_code:
          type: string
          nullable: true
          description: The completion code used by the participant to complete the study.
      example:
        id: 60d9aadeb86739de712faee0
        participant_id: 60bf9310e8dec401be6e9615
        started_at: 2021-05-20T11:03:00.457000Z
        status: ACTIVE
        study_code: ABC123
    Submission:
      additionalProperties: true
      required:
        - id
        - started_at
        - status
        - study_id
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The id of the submission
        completed_at:
          type: string
          description: The time the submission was completed at.
          nullable: true
        entered_code:
          type: string
          description: The completion code used by the participant to complete the study.
          nullable: true
        participant:
          type: string
          description: Participant id.
        started_at:
          type: string
          description: The date and time that the user started the submission (UTC)
        status:
          type: string
          description: The current status of the submission
          enum:
            - ACTIVE
            - APPROVED
            - AWAITING REVIEW
            - REJECTED
            - RESERVED
            - RETURNED
            - TIMED-OUT
            - SCREENED OUT
            - UNKNOWN
        study_id:
          type: string
          description: Study id.
      example:
        id: 625d4a831bcda2d59ac5a251
        completed_at: 2022-04-18T11:25:02.734000Z
        entered_code: 8E8AC860
        participant: 60bf9310e8dec401be6e9615
        started_at: 2022-04-18T11:24:51.395000Z
        status: APPROVED
        study_id: 60aca280709ee40ec37d4885
    SubmissionDetail:
      additionalProperties: true
      required:
        - id
        - started_at
        - status
        - study_id
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The id of the submission
        completed_at:
          type: string
          description: The time the submission was completed at.
          nullable: true
        entered_code:
          type: string
          description: The completion code used by the participant to complete the study.
          nullable: true
        participant:
          type: string
          description: Participant id.
        started_at:
          type: string
          description: The date and time that the user started the submission (UTC)
        status:
          type: string
          description: The current status of the submission
          enum:
            - ACTIVE
            - APPROVED
            - AWAITING REVIEW
            - REJECTED
            - RESERVED
            - RETURNED
            - TIMED-OUT
            - SCREENED OUT
            - UNKNOWN
        study_id:
          type: string
          description: Study id.
        bonus_payments:
          type: array
          description: Bonus payments that have been paid on the submission. Returned in pence / cents.
          items:
            type: number
      example:
        id: 625d4a831bcda2d59ac5a251
        completed_at: 2022-04-18T11:25:02.734000Z
        entered_code: 8E8AC860
        participant: 60bf9310e8dec401be6e9615
        started_at: 2022-04-18T11:24:51.395000Z
        status: APPROVED
        study_id: 60aca280709ee40ec37d4885
        bonus_payments: [1000, 2536]
    SubmissionTransition:
      required:
        - action
      type: object
      properties:
        action:
          type: string
          enum:
            - APPROVE
            - REJECT
            - COMPLETE
          description: Action to execute.
          example: APPROVE
        message:
          type: string
          description: |-
            Required if action is 'REJECT'. Message sent to the participant
            explaining the reason for the rejection.
            It must be at least 100 chars long.
          example: Good explanation of the situation.
        rejection_category:
          type: string
          enum:
            - TOO_QUICKLY
            - TOO_SLOWLY
            - FAILED_INSTRUCTIONS
            - INCOMP_LONGITUDINAL
            - FAILED_CHECK
            - LOW_EFFORT
            - MALINGERING
            - NO_CODE
            - BAD_CODE
            - NO_DATA
            - UNSUPP_DEVICE
            - OTHER
          description: |-
            Required if action is 'REJECT', it sums as the category of
            the rejection.
          example: LOW_EFFORT
        completion_code:
          type: string
          description: Required if the action is 'COMPLETE'. The completion code must match a value provided when creating the study, and the actor must have been set to `researcher`. Any actions that were provided during the set up of the completion code (e.g. automatically approve) will then be carried out.
    ReturnRequestedResponse:
      type: object
      additionalProperties: true
      properties:
        id:
          type: string
          description: the database id of the submission instance
        status:
          type: string
          description: The current status of the submission
          enum:
            - ACTIVE
            - APPROVED
            - AWAITING REVIEW
            - SCREENED OUT
            - REJECTED
            - RESERVED
            - RETURNED
            - TIMED-OUT
            - UNKNOWN
        participant:
          type: string
          description: The participant who took part in the study.
        return_requested:
          type: string
          format: date-time
          nullable: true
          description: The date and time when a request was made to return a submission.
    RequirementsResponse:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: |-
            List of all defined requirements. There are many attributes
            per requirement that are not documented and are used by our webapp.
          items:
            $ref: "#/components/schemas/Requirement"
    Requirement:
      additionalProperties: true
      required:
        - _cls
        - attributes
      type: object
      properties:
        _cls:
          type: string
          description: Type of requirement
          example: SelectAnswerEligibilityRequirement
        attributes:
          type: array
          description: |-
            Attributes defining the requirement. Its values will depend
            on the type of requirement
          items:
            $ref: "#/components/schemas/Attribute"
        query:
          additionalProperties: true
          type: object
          properties:
            id:
              type: string
              description: Id of the question
              example: 54ac6ea9fdf99b2204feb899
            question:
              type: string
              nullable: true
              description: Question asked to the participant
              example: What is your first language?
    Attribute:
      additionalProperties: true
      required:
        - value
      type: object
      properties:
        index:
          type: number
          description: |-
            Attribute index. It is mandatory for some type of requirements,
            like SelectAnswerEligibilityRequirement.
          example: 5.0
        name:
          type: string
          description: |-
            Attribute name. It is mandatory for some type of requirements,
            like AgeRangeEligibilityRequirement.
        value:
          oneOf:
            - type: object
              nullable: true
            - type: array
              nullable: true
              items:
                anyOf:
                  - type: string
                  - type: object
            - type: string
              nullable: true
            - type: number
              nullable: true
            - type: boolean
          x-nullable: true
          description: |-
            Attribute value. It can be null, a number, a date or a boolean depending on the type of requirement.
            For boolean values, there is no need to specify all false (non selected) options.
          example: "true"
    StudyCostRequest:
      additionalProperties: true
      required:
        - reward
        - total_available_places
      type: object
      properties:
        reward:
          type: number
          description: How much are you going to pay the participants in cents.
            We use the currency of your account
        total_available_places:
          type: number
          description: How many participants are you looking to recruit
    StudyCostResponse:
      additionalProperties: true
      type: object
      properties:
        total_cost:
          type: number
          description: Total cost of the study including VAT and fees in cents.
            We use your account VAT and Fee percentage.
            The amount is in your account's currency.
          example: 56
      required:
        - total_cost
    AmountAndCurrency:
      type: object
      properties:
        amount:
          type: number
          description: Amount in subcurrency. £1 will return 100
          example: 100
        currency:
          type: string
          description: Currency Code
          example: USD
    StudyCostBreakdown:
      type: object
      properties:
        rewards:
          allOf:
            - "$ref": "#/components/schemas/AmountAndCurrency"
        fees:
          allOf:
            - "$ref": "#/components/schemas/AmountAndCurrency"
        tax:
          allOf:
            - "$ref": "#/components/schemas/AmountAndCurrency"
    StudyCostRepSampleBreakdown:
      type: object
      properties:
        rep_sample_fees:
          allOf:
            - "$ref": "#/components/schemas/AmountAndCurrency"
        rep_sample_tax:
          allOf:
            - "$ref": "#/components/schemas/AmountAndCurrency"
    StudyTotalCost:
      type: object
      properties:
        rewards:
          allOf:
            - "$ref": "#/components/schemas/StudyCostBreakdown"
            - "$ref": "#/components/schemas/StudyCostRepSampleBreakdown"
        bonuses:
          allOf:
            - "$ref": "#/components/schemas/StudyCostBreakdown"
        _links:
          type: object
          additionalProperties: true
    StudyAccessDetailsProgress:
      type: array
      properties:
        id:
          type: string
          description: The access details collection ID. Informational field.
        access_details:
          allOf:
            - "$ref": "#/components/schemas/AccessDetailProgress"
        _links:
          type: object
          additionalProperties: true
      example:
        id: 42a9f01f-3cd8-4zf0-b79a-9b2cd50a1e85
        progress:
          - external_url: "https://google.com"
            total_allocation: 10
            allocated: 5
          - external_url: "https://bing.com"
            total_allocation: 10
            allocated: 4
    BulkBonus:
      type: object
      required:
        - id
        - total_amount
      properties:
        id:
          type: string
          description: Bonus ID. It is the ID to be used when paying the bonus
        study:
          type: string
          description: Study ID
        amount:
          type: number
          description: The amount the participant will receive in cents
        fees:
          type: number
          description: The fees Prolific will charge for this bonus in cents
        vat:
          type: number
          description: The VAT cost for this bonus in cents
        total_amount:
          type: number
          description: Total ammount that will be deducted from your balance in cents
      example:
        id: 621014cb8e9e0f81e387021f
        study: 620ca2735fcbba4fa2b3211a
        amount: 850
        fees: 283.34
        vat: 0
        total_amount: 1133.34
    SendMessage:
      required:
        - recipient_id
        - body
        - study_id
      type: object
      properties:
        recipient_id:
          type: string
          description: Recipient user's id
        body:
          type: string
          description: Message Body. Text is sanitised for safe storage and display.
        study_id:
          type: string
          description: This study is the reason for this message
    SendBulkMessage:
      required:
        - ids
        - body
        - study_id
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: A list of participant ID's
        body:
          type: string
          description: Message Body. Text is sanitised for safe storage and display.
        study_id:
          type: string
          description: A study ID
    Messages:
      type: object
      additionalProperties: true
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Message"
    Message:
      required:
        - sender_id
        - body
        - sent_at
        - channel_id
      type: object
      properties:
        sender_id:
          type: string
          description: Id of the user who sent the message
        body:
          type: string
          description: Body of the message.
        sent_at:
          type: string
          format: date-time
          description: Date time when message was sent
        type:
          type: string
          description: Will only me message for now
        channel_id:
          type: string
          description: The channel ID, for linking back to a thread in the Prolific app.
          example: d45c8a5e812ff990fc6546beaf888c9820f4c184f7200a45d900cf0f321f7f38
        data:
          type: object
          description: Metadata for a message
          properties:
            study_id:
              type: string
              description: What study the message relates to. In case this is not automatically filled for the participant, they can choose which study their message relates to.
              example: 620ca2735fcbba4fa2b3211a
            category:
              type: string
              description: Participants can self-categorise their message before sending it.
              example: feedback
              enum:
                - payment-timing
                - payment-issues
                - technical-issues
                - feedback
                - rejections
                - other

    SubscriptionList:
      additionalProperties: true
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: List of all subscriptions.
          items:
            $ref: "#/components/schemas/SubscriptionDetail"
    SubscriptionUpdateDetail:
      additionalProperties: true
      required:
        - event_type
        - target_url
      type: object
      properties:
        event_type:
          type: string
          description: The name of the event type associated to the subscription.
        target_url:
          type: string
          description: The URL that the subscription will notify when your event type is triggered.
        is_enabled:
          type: boolean
          description: Whether the subscription is enabled or not.
    SubscriptionDetail:
      additionalProperties: true
      required:
        - event_type
        - target_url
        - workspace_id
      type: object
      properties:
        id:
          type: string
          description: The ID of the subscription.
          readOnly: true
        event_type:
          type: string
          description: The name of the event type associated to the subscription.
        target_url:
          type: string
          description: The URL that the subscription will notify when your event type is triggered.
        is_enabled:
          type: boolean
          description: Whether the subscription is enabled or not.
        workspace_id:
          type: string
          description: The ID of the workspace we will create the subscription in.
    SubscriptionEventList:
      type: object
      additionalProperties: true
      required:
        - results
      properties:
        results:
          type: array
          description: All the events triggered for the subscription
          items:
            $ref: "#/components/schemas/SubscriptionEvent"
    SubscriptionEvent:
      type: object
      properties:
        id:
          type: string
          description: The ID of the subscription event.
        datetime_created:
          type: string
          description: The time the event was created.
        datetime_updated:
          type: string
          description: The last time the event was updated.
        event_type:
          type: string
          description: The event type that was triggered.
        resource_id:
          type: string
          description: The Prolific Resource ID that the event is linked to.
        status:
          type: string
          description: The status of the event. Will be `FAILED` if the `target_url` response is not 2xx.
          enum:
            - PENDING
            - SUCCEEDED
            - FAILED
        target_url:
          type: string
          description: The URL where the event payload is sent.
        payload:
          type: object
          nullable: true
          description: The event payload that was sent to the target url.
    EventTypeList:
      type: object
      additionalProperties: true
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/EventType"
    EventType:
      type: object
      properties:
        event_type:
          type: string
        description:
          type: string
      example:
        event_type: study.status.change
        description: A status change event for studies
    CreateSecret:
      type: object
      additionalProperties: true
      properties:
        workspace_id:
          type: string
          description: The ID of the workspace you are creating the secret in
    SecretList:
      type: object
      additionalProperties: true
      properties:
        results:
          type: array
          description: A list of secrets.
          items:
            $ref: "#/components/schemas/SecretDetail"
      example:
        - id: 63722971f9cc073ecc730f6a
          value: "secret-and-safe"
          workspace_id: 63722982f9cc073ecc730f6b
    SecretDetail:
      type: object
      additionalProperties: true
      properties:
        id:
          type: string
          description: The ID of the secret.
        value:
          type: string
          description: The secret value.
        workspace_id:
          type: string
          description: The ID of the workspace that the secret belongs to.
      example:
        id: 63722971f9cc073ecc730f6a
        value: "cGNqFPb6y0RT3XO9XVSessBDYIbHQ-...."
        workspace_id: 63722982f9cc073ecc730f6b
    GetAllSurveysResponse:
      title: Get all the surveys API response
      type: object
      required:
        - results
      properties:
        results:
          type: array
          description: List of all surveys matching the criteria.
          items:
            $ref: "#/components/schemas/SurveyOut"
    SurveyIn:
      title: SurveyIn
      required:
        - researcher_id
        - title
      type: object
      properties:
        researcher_id:
          title: Researcher Id
          type: string
          description: The Prolific researcher ID.
          example: "7172727272"
        sections:
          title: Sections
          type: array
          items:
            "$ref": "#/components/schemas/SurveySection"
          description: An array of sections in the survey, or use `questions`.
        questions:
          title: Questions
          type: array
          items:
            "$ref": "#/components/schemas/SurveyQuestion"
          description: An array of questions in the survey, or use `sections`.
        title:
          title: Title
          type: string
          description: The survey title.
          example: A survey about vegetables
      description: The model used to create a `Survey`.
    SurveyOut:
      title: SurveyOut
      required:
        - researcher_id
        - title
      type: object
      properties:
        _id:
          title: " Id"
          type: string
          description: Auto generated by the system.
        date_created:
          title: Date Created
          type: string
          description: The date/time the survey was created (UTC).
          format: date-time
          example: "2022-05-27T08:43:12"
        date_modified:
          title: Date Modified
          type: string
          description: The date/time the survey was modified (UTC).
          format: date-time
          example: "2022-05-27T08:43:12"
        researcher_id:
          title: Researcher Id
          type: string
          description: The Prolific researcher ID.
          example: "7172727272"
        sections:
          title: Sections
          type: array
          items:
            "$ref": "#/components/schemas/SurveySection"
          description: "Optional: An array of sections in the survey, otherwise `questions` will be defined."
        questions:
          title: Questions
          type: array
          items:
            "$ref": "#/components/schemas/SurveyQuestion"
          description: "Optional: An array of questions in the survey, otherwise `sections` will be defined."
        title:
          title: Title
          type: string
          description: The survey title.
          example: A survey about vegetables
      description: The model used to create a serialised representation a `Survey`.
    SurveyResponseIn:
      title: ResponseIn
      required:
        - participant_id
        - submission_id
      type: object
      properties:
        participant_id:
          title: Participant Id
          type: string
          description: The Prolific participant ID.
          example: 62908f0b98a55b36ac68b992
        sections:
          title: Sections
          type: array
          items:
            "$ref": "#/components/schemas/SurveyResponseSection"
          description: An array of sections from the survey, otherwise use `questions`.
        questions:
          title: Questions
          type: array
          items:
            "$ref": "#/components/schemas/SurveyQuestionResponse"
          description: An array of questions from the survey, otherwise use `sections`.
        submission_id:
          title: Submission Id
          type: string
          description: The Prolific submission ID.
          example: 62908f0b98a55b36ac68b992
      description: The model used to create a `Response`.
    SurveyResponseSection:
      title: Section
      required:
        - questions
        - section_id
      type: object
      properties:
        questions:
          title: Questions
          type: array
          items:
            "$ref": "#/components/schemas/SurveyQuestionResponse"
          description: The questions for a given section.
        section_id:
          title: Section Id
          type: string
          description: The section ID.
          format: uuid
      description: |-
        Responsible for linking question/answers to a response for a survey.

        This is more of a long term thing, but helps if we add now.
    SurveyQuestionResponse:
      title: QuestionResponse
      required:
        - answers
        - question_id
        - question_title
      type: object
      properties:
        answers:
          title: Answers
          type: array
          items:
            "$ref": "#/components/schemas/SurveyResponseAnswer"
          description: The answers selected.
        question_id:
          title: Question Id
          type: string
          description: The question ID.
          format: uuid
        question_title:
          title: Question Title
          type: string
          description: The title of the survey question.
      description: Responsible for defining an answer to a survey question
    SurveyResponseOut:
      title: ResponseOut
      required:
        - participant_id
        - submission_id
      type: object
      properties:
        _id:
          title: " Id"
          type: string
        date_created:
          title: Date Created
          type: string
          description: The date/time the response was created (UTC).
          format: date-time
          example: "2022-05-27T08:43:12"
        date_modified:
          title: Date Modified
          type: string
          description: The date/time the response was modified (UTC).
          format: date-time
          example: "2022-05-27T08:43:12"
        participant_id:
          title: Participant Id
          type: string
          description: The Prolific participant ID.
          example: 62908f0b98a55b36ac68b992
        sections:
          title: Sections
          type: array
          items:
            "$ref": "#/components/schemas/SurveyResponseSection"
          description: An array of sections from the survey, otherwise `questions`.
        questions:
          title: Questions
          type: array
          items:
            "$ref": "#/components/schemas/SurveyQuestionResponse"
          description: An array of questions from the survey, otherwise `sections`.
        submission_id:
          title: Submission Id
          type: string
          description: The Prolific submission ID.
          example: 62908f0b98a55b36ac68b992
      description: The model used to create a serialised representation a `Response`.
    SurveyResponseAnswer:
      title: ResponseAnswer
      required:
        - answer_id
        - value
      type: object
      properties:
        answer_id:
          title: Answer Id
          type: string
          description: The answer ID.
          format: uuid
        value:
          title: Value
          type: string
          description: The answer option value selected.
          example: Potato
      description: Responsible for defining a response to a question
    SurveySection:
      title: Section
      required:
        - questions
        - title
      type: object
      properties:
        id:
          title: Id
          type: string
          description: Auto generated by the system.
          format: uuid
        questions:
          title: Questions
          maxItems: 5
          type: array
          items:
            "$ref": "#/components/schemas/SurveyQuestion"
          description: An array of questions a section within a Survey.
        title:
          title: Title
          type: string
          description: The section title.
          example: Root vegetables
      description: |-
        Responsible for providing a section to the survey.

        This is more of a long term thing, but helps if we add now.
    SurveySummary:
      title: Summary
      required:
        - survey_id
      type: object
      properties:
        survey_id:
          title: Survey Id
          type: string
          description: The survey ID.
        questions:
          title: Questions
          type: array
          items:
            "$ref": "#/components/schemas/SurveySummaryQuestion"
          description: A list of questions for the given survey.
      description:
        Responsible for providing a base for all the aggregated answers
        for a survey.
      example:
        survey_id: 63346b3a4fd1fe7b39f192e9
        questions:
          - question_id: 02dee012-25e4-449e-8f2f-a552b9007d92
            question: "Do you feel that this will all be alright on the night?"
            total_answers: 10
            answers:
              - answer_id: 4c69011b-9b6b-46c6-8ba2-da80761131dc
                answer: Yes
                count: 4
              - answer_id: f3c8d38f-842c-49d9-a0bb-e17b7803b240
                answer: No
                count: 6
    SurveySummaryAnswer:
      title: SummaryAnswer
      required:
        - answer
      type: object
      properties:
        answer_id:
          title: Answer Id
          type: string
          description: The answer ID.
          format: uuid
        answer:
          title: Answer
          type: string
          description: The answer selected.
        count:
          title: Count
          type: integer
          description: The count of how many times this answer was used in a response.
          default: 0
      description: Responsible for housing the aggregation for a specific answer.
    SurveySummaryQuestion:
      title: SummaryQuestion
      required:
        - question
      type: object
      properties:
        question_id:
          title: Question Id
          type: string
          description: The question ID.
          format: uuid
        question:
          title: Question
          type: string
          description: The title of the question.
        total_answers:
          title: Total Answers
          type: integer
          description: The total number of answered responses for a given question.
          default: 0
        answers:
          title: Answers
          type: array
          items:
            "$ref": "#/components/schemas/SurveySummaryAnswer"
          description: A list of aggregated answer information.
      description:
        Responsible for housing the questions we want to aggregate for
        the summary.
    SurveyQuestion:
      title: Question
      required:
        - answers
        - title
        - type
      type: object
      properties:
        answers:
          title: Answers
          maxItems: 10
          type: array
          items:
            "$ref": "#/components/schemas/SurveyAnswerOption"
          description: An array of answer options for a question.
        id:
          title: Id
          type: string
          format: uuid
        title:
          title: Title
          maxLength: 200
          type: string
          description: The question title.
          example: What is your favourite root vegetable?
        type:
          allOf:
            - "$ref": "#/components/schemas/SurveyQuestionType"
          description: The type of question being asked.
          example: single
      description: Responsible for defining a question within a survey.
    SurveyAnswerOption:
      title: AnswerOption
      required:
        - value
      type: object
      properties:
        id:
          title: Id
          type: string
          format: uuid
        value:
          title: Value
          maxLength: 140
          type: string
          description: The answer option value that can be selected.
          example: Potato
      description: Responsible for defining an answer model for a given question
    SurveyQuestionType:
      title: QuestionType
      enum:
        - single
        - multiple
      type: string
      description: |-
        Responsible for articulating the question type. At the moment we have:

        - single answer
        - multiple answer

        Args:
            str (_type_): The type of question.
            Enum (_type_): The class to define an enum.
    ParticipantGroupListResponse:
      additionalProperties: true
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ParticipantGroup"
    ParticipantGroupResponse:
      additionalProperties: true
      allOf:
        - $ref: "#/components/schemas/ParticipantGroup"
    ParticipantGroup:
      type: object
      properties:
        id:
          type: string
          description: The id of the participant group
          example: 5e9b9c9b0f9c9a0001b0b1f5
        name:
          type: string
          description: The name of the participant group
          example: Group 1
        project_id:
          type: string
          nullable: true
          description: The id of the project the participant group belongs to
          example: null
          deprecated: true
        workspace_id:
          type: string
          nullable: true
          description: The id of the workspace the participant group belongs to. A participant group can only belong to either a workspace or an organisation.
          example: 5e9b9c9b0f9c9a0001b1ca2f
        organisation_id:
          type: string
          nullable: true
          description: The id of the organisation the participant group belongs to. A participant group can only belong to either a workspace or an organisation.
          example: 5e9b9c9b0f9c9a0001b1ca2f
        description:
          type: string
          nullable: true
          description: The user-provided description of the participant group
          example: My first participant group
        participant_count:
          type: integer
          description: The number of participants in the participant group
          example: 10
          readOnly: true
        is_deleted:
          type: boolean
          description: Whether the participant group has been deleted
          example: false
          readOnly: true
        feeder_studies:
          type: array
          description: Details of all studies which are configured to modify the participants in this group through completion codes.
          readOnly: true
          items:
            type: object
            properties:
              id:
                type: string
                description: The id of the study.
                example: 5e9b9c9b0f9c9a0001b0b1f4
              name:
                type: string
                description: The name of the study.
                example: Study 1
              internal_name:
                type: string
                description: The internal name of the study.
                example: My Study
              status:
                type: string
                description: The current status of the study.
                example: "COMPLETED"
              feeder_completion_codes:
                type: array
                description: The completion codes which will modify the participants in this group.
                items:
                  type: object
                  description: The code within this study that interacts with the participant group.
                  properties:
                    code:
                      type: string
                      description: The code that will modify the participants in this group.
                      example: "AJVRH234"
                    code_type:
                      type: string
                      description: The label or code type given to this code within the context of the study.
                      example: "COMPLETION_CODE"
                    action:
                      type: string
                      description: The action that will be taken when this code is used.
                      example: "ADD_TO_PARTICIPANT_GROUP"
                      enum:
                        - ADD_TO_PARTICIPANT_GROUP
                        - REMOVE_FROM_PARTICIPANT_GROUP
    ParticipantGroupUpdate:
      type: object
      properties:
        name:
          type: string
          description: The name of the participant group
          example: Group 1
        participant_ids:
          type: array
          description: |-
            The ids of participants to be included in the group.

            Note, this overwrites any existing participants in the group; use the participant group membership endpoints to [append](#tag/Participant-Groups/operation/AddToParticipantGroup) or [remove](#tag/Participant-Groups/operation/RemoveFromParticipantGroup) participants from the group.
          items:
            type: string
          example:
            [
              "5e9b9c9b0f9c9a0001b0b1f4",
              "5e9b9c9b0f9c9a0001b0b1f5",
              "5e9b9c9b0f9c9a0001b0b1f6",
            ]
    ParticipantIDList:
      type: object
      properties:
        participant_ids:
          type: array
          items:
            type: string
            description: The id of the participant
            example: 5e9b9c9b0f9c9a0001b0b1f5
    ParticipantGroupMembership:
      type: object
      properties:
        participant_id:
          type: string
          description: The id of the participant
          example: 5e9b9c9b0f9c9a0001b0b1f5
        datetime_created:
          type: string
          description: The date and time the participant was added to the Participant Group
          example: "2020-04-20T12:00:00Z"
    ParticipantGroupMembershipListResponse:
      additionalProperties: true
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ParticipantGroupMembership"
    AutomaticallyApprove:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The action to take
          enum:
            - "AUTOMATICALLY_APPROVE"
    AddToParticipantGroup:
      type: object
      required:
        - action
        - participant_group
      properties:
        action:
          type: string
          description: The action to take
          enum:
            - "ADD_TO_PARTICIPANT_GROUP"
        participant_group:
          description: The participant group to add the participant to.
          type: string
          example: "636e4f379e7d29c6875313e3"
    RemoveFromParticipantGroup:
      type: object
      required:
        - action
        - participant_group
      properties:
        action:
          type: string
          description: The action to take
          enum:
            - "REMOVE_FROM_PARTICIPANT_GROUP"
        participant_group:
          description: The participant group to remove the participant from.
          type: string
          example: "636e4f379e7d29c6875313e3"
    ManuallyReview:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          description: The action to take
          enum:
            - "MANUALLY_REVIEW"
    RequestReturn:
      type: object
      required:
        - action
        - return_reason
      properties:
        action:
          type: string
          description: The action to take
          enum:
            - "REQUEST_RETURN"
        return_reason:
          type: string
          description: The reason you would like to request a return
          example: Failed an attention check
    WorkspaceBalance:
      type: object
      properties:
        currency_code:
          type: string
          description: The currency used for all financial transactions within the workspace.
        total_balance:
          type: integer
          description: |-
            The total balance of the workspace, including funds which have already been assigned to active studies.

            All monetary values are shown in the sub-currency of your workspace currency (e.g. pence, cents).
        balance_breakdown:
          type: object
          description: |-
            A breakdown of the total balance of the workspace into:
            - Funds available to pay to participants
            - Funds pre-paid to Prolific for our services
            - Funds for any VAT applied to our Platform fees
        available_balance:
          type: integer
          description: |-
            The remaining balance of your workspace which is available to spend, after removing funds assigned to already active studies, etc.
        available_balance_breakdown:
          type: object
          description: |-
            A breakdown of the available balance of the workspace into:
            - Funds available to pay to participants
            - Funds pre-paid to Prolific for our services
            - Funds for any VAT applied to our Platform fees
      example:
        currency_code: "GBP"
        total_balance: 630
        balance_breakdown:
          rewards: 450
          fees: 150
          vat: 30
        available_balance: 210
        available_balance_breakdown:
          rewards: 150
          fees: 50
          vat: 10
    CreateInvitationResponse:
      additionalProperties: true
      type: object
      properties:
        invitations:
          type: array
          items:
            $ref: "#/components/schemas/Invitation"
    Invitation:
      type: object
      properties:
        association:
          type: string
          format: objectId
          description: The ID of the workspace or project to which the invitee was invited.
        invitee:
          type: object
          properties:
            id:
              type: string
              nullable: true
              format: objectId
              description: The unique ID of the invitee.
            name:
              type: string
              nullable: true
              description: The name of the invitee.
            email:
              type: string
              format: email
              description: The email address of the invitee.
        invited_by:
          type: string
          format: objectId
          description: The ID of the user who sent the invitation.
        status:
          type: string
          enum: [INVITED, ACCEPTED]
          description: The current status of the invitation.
        invite_link:
          type: string
          format: uri
          description: The link that the invitee can use to accept the invitation.
    CreateInvitationRequest:
      type: object
      properties:
        association:
          type: string
          format: objectId
          description: The ID of the workspace to which the users are being invited.
        emails:
          type: array
          items:
            type: string
            format: email
          description: An array of email addresses of the users to invite.
        role:
          type: string
          enum: [WORKSPACE_ADMIN, WORKSPACE_COLLABORATOR, PROJECT_EDITOR]
          description: |
            The role that the invited users will have in the workspace or project. This can be one of the following:
            - "WORKSPACE_ADMIN": The user will have administrative rights in the workspace. They can manage settings, invite users, and oversee all projects.
            - "WORKSPACE_COLLABORATOR": The user will be a regular collaborator in the workspace. They can contribute to projects but don't have administrative rights.
            - "PROJECT_EDITOR": The user will have edit rights for a specific project within a workspace.

    FilterListAttributes:
      type: object
      properties:
        filter_id:
          type: string
          description: The ID of the filter, based on a slugified version of the title at the time the filter was created.
        title:
          type: string
          description: The title of the filter.
        description:
          type: string
          description: A description of the filter.
        type:
          type: string
          description: The filter type.
          enum:
            - select
            - range
        question:
          type: string
          description: The question asked of participants to generate this filter.
    FilterListDetailedAttributes:
      type: object
      properties:
        researcher_help_text:
          type: string
          nullable: true
          description: Some help text to be displayed to researchers in the prescreening modal.
        participant_help_text:
          type: string
          nullable: true
          description: Some help text to be displayed to participants in the About You section.
        category:
          type: string
          nullable: true
          description: The category the filter is displayed in in About You and the prescreening modal.
        subcategory:
          type: string
          nullable: true
          description: The sub-category the filter is displayed in in the prescreening modal.
        display_order:
          type: integer
          nullable: true
          description: The order in which the filter is displayed within its sub-category in the prescreening modal.
        tags:
          type: array
          nullable: true
          description: Some additional tags that can be used to display the filter in a specific way, e.g. recommended, new, expiring.
          items:
            type: string
    SelectFilterListAttributes:
      type: object
      properties:
        choices:
          type: object
          description: An object containing all the filter's possible responses as key-value pairs, with sequential integer IDs or database ObjectIDs as the keys and the text of the response as the values.
          additionalProperties: true
        data_type:
          type: string
          enum:
            - ChoiceID
            - ParticipantID
            - StudyID
            - ParticipantGroupID
          description: |-
            The format of the keys in the choices object. If the keys are strings representing sequential integers,
            the data format is integer. If the keys are database ObjectIDs, the type of ID is specified.

    RangeFilterListAttributes:
      type: object
      properties:
        min:
          oneOf:
            - type: integer
            - type: string
          description: The minimum valid value of the range.
        max:
          oneOf:
            - type: integer
            - type: string
          description: The maximum valid value of the range.
        data_type:
          type: string
          description: |-
            The data type of the range. If the data type is integer, the lower and upper values must be integers.
            If the data type is date, the lower and upper values must be ISO8601 dates.
          enum:
            - date
            - integer
    SelectFilterListResponse:
      allOf:
        - $ref: "#/components/schemas/FilterListAttributes"
        - $ref: "#/components/schemas/SelectFilterListAttributes"
    SelectFilterListDetailedResponse:
      allOf:
        - $ref: "#/components/schemas/FilterListAttributes"
        - $ref: "#/components/schemas/SelectFilterListAttributes"
        - $ref: "#/components/schemas/FilterListDetailedAttributes"
    RangeFilterListResponse:
      allOf:
        - $ref: "#/components/schemas/FilterListAttributes"
        - $ref: "#/components/schemas/RangeFilterListAttributes"
    RangeFilterListDetailedResponse:
      allOf:
        - $ref: "#/components/schemas/FilterListAttributes"
        - $ref: "#/components/schemas/RangeFilterListAttributes"
        - $ref: "#/components/schemas/FilterListDetailedAttributes"
    FilterList:
      type: object
      properties:
        results:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/SelectFilterListResponse"
              - $ref: "#/components/schemas/SelectFilterListDetailedResponse"
              - $ref: "#/components/schemas/RangeFilterListResponse"
              - $ref: "#/components/schemas/RangeFilterListDetailedResponse"
        _links:
          type: object
          additionalProperties: true
        meta:
          type: object
          additionalProperties: true
    SelectFilter:
      type: object
      required:
        - filter_id
        - selected_values
      properties:
        filter_id:
          type: string
          description: ID of the "select" type filter.
        selected_values:
          type: array
          description: |-
            This schema applies for filters of the `select` type, as defined in the [filter list response](\#tag/Filters/paths/~1api~1v1~1filters~1/get).

            Array of IDs matching the response IDs, from the `select` filter's `choices` (see response linked above).

            String format should match the `data_type` of the `select` filter's `choices` (see response linked above).
          items:
            type: string
        weightings:
          type: object
          description: |-
            Ratios to control the distribution of participants across the selected values.

            Integer percentages, floats, and exact quantities are valid inputs.
          additionalProperties:
            type: number
    RangeFilter:
      type: object
      required:
        - selected_range
        - filter_id
      properties:
        filter_id:
          type: string
          description: ID of the "range" type filter.
        selected_range:
          type: object
          description: |-
            This schema applies for filters of the `range` type, as defined in the [filter list response](\#tag/Filters/paths/~1api~1v1~1filters~1/get).

            A dictionary with two possible objects, 'lower' and 'upper'. At least one must be present and a non-null value.

            The expected data type for these values is defined by the `range` filter's `data_type` (see response linked above).

            If the data_type is a date, string format should be a parseable ISO8601 date string. Date values should be provided as a string in ISO 8601 format.

            Leaving a value as null will result in that bound being set to the lowest or highest possible value, depending on whether it is the upper or lower bound.
          properties:
            lower:
              anyOf:
                - type: integer
                - type: string
              description: Your selected lower bound for the range.
            upper:
              anyOf:
                - type: integer
                - type: string
              description: Your selected upper bound for the range.
    AccessDetail:
      type: object
      required:
        - external_url
        - total_allocation
      properties:
        external_url:
          type: string
          description: URL of the task you want to send the participant to. You can pass URL search parameters as in `external_study_url`.
        total_allocation:
          type: number
          description: The number of places you want to be sent to this URL for taskflow.
    AccessDetailProgress:
      type: object
      required:
        - external_url
        - total_allocation
      properties:
        external_url:
          type: string
          description: URL of the task you want to send the participant to. You can pass URL search parameters as in `external_study_url`.
        total_allocation:
          type: number
          description: The number of places you want to be sent to this URL for taskflow.
        allocated:
          type: number
          description: The number of places that have been allocated to participants.
    UpdateFilterSet:
      type: object
      properties:
        name:
          type: string
          description: Name of the filter set.
        filters:
          type: array
          description: List of all filters contained in the filter set.
          items:
            anyOf:
              - $ref: "#/components/schemas/SelectFilter"
              - $ref: "#/components/schemas/RangeFilter"
      example:
        - name: Left-handed 30-somethings
          filters:
            - id: handedness
              selected_values:
                - "1"
            - id: age
              selected_range:
                lower: 30
                upper: 39
    CreateFilterSet:
      allOf:
        - type: object
          properties:
            workspace_id:
              type: string
              description: ID of the workspace where the filter set can be used.
            organisation_id:
              type: string
              description: ID of the organisation where the filter set can be used.
            name:
              type: string
              description: Name of the filter set.
            filters:
              type: array
              description: List of all filters contained in the filter set.
              items:
                anyOf:
                  - $ref: "#/components/schemas/SelectFilter"
                  - $ref: "#/components/schemas/RangeFilter"
      example:
        - workspace_id: 644aaabfaf6bbc363b9d47c6
          name: Ambidextrous teenagers
          filters:
            - id: handedness
              selected_values:
                - "2"
            - id: age
              selected_range:
                lower: 18
                upper: 19
    FilterSet:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: ID of the filter set.
            version:
              type: integer
              description: An incrementing integer indicating the version of the filter set.
            is_deleted:
              type: boolean
              description: Whether the filter set has been deleted.
            is_locked:
              type: boolean
              description: Whether the filter set has been locked.
            workspace_id:
              type: string
              description: ID of the workspace where the filter set can be used.
              nullable: true
            organisation_id:
              type: string
              description: ID of the workspace where the filter set can be used.
              nullable: true
            name:
              type: string
              description: Name of the filter set.
            filters:
              type: array
              description: List of all filters contained in the filter set.
              items:
                anyOf:
                  - $ref: "#/components/schemas/SelectFilter"
                  - $ref: "#/components/schemas/RangeFilter"
      example:
        id: 644ab312af6bbc363b9d47c7
        workspace_id: 644aaabfaf6bbc363b9d47c6
        name: Ambidextrous teenagers
        filters:
          - id: handedness
            selected_values:
              - "2"
          - id: age
            selected_range:
              lower: 18
              upper: 19
        version: 1
        is_locked: true
        is_deleted: false
        eligible_participant_count: 0
    FilterSetParticipantCount:
      properties:
        eligible_participant_count:
          type: integer
          description: |-
            The number of participants who match the filter sets filters. Please note that if the number is
            lower than 25 the count will be obscured to prevent identification of participants.
      additionalProperties: true
    FilterSetList:
      type: object
      properties:
        results:
          type: array
          description: List of filter sets.
          items:
            $ref: "#/components/schemas/FilterSet"
      additionalProperties: true
    RequirementsCountRequest:
      type: object
      required:
        - filters
      properties:
        filters:
          type: array
          description: |-
            List of filters to apply to the count. This parameter uses the new, simplified
            filters schema for interacting with eligibility.
          items:
            anyOf:
              - $ref: "#/components/schemas/SelectFilter"
              - $ref: "#/components/schemas/RangeFilter"
        workspace_id:
          type: string
          description: |-
            The ID of the workspace you will be creating a study in.

            Due to US tax laws, non US residents may not participate in studies created by US researchers.
            For this reason, we use the country specified in the workspace to determine eligibility.

            If you do not specify a workspace ID, we will use the current workspace ID of the user making the request.
            Your eligibility count may not be accurate if you do not specify a workspace ID.
        organisation_id:
          type: string
          description: |-
            The ID of the workspace you will be creating a filterset in.

    RequirementsCount:
      required:
        - count
      type: object
      additionalProperties: true
      properties:
        count:
          type: number
          description: Number of participants passing all the requirements

    MutuallyExclusiveStudyCollectionsResponse:
      additionalProperties: false
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: List of all mutually exclusive study collections in a project
          items:
            $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionList"
    MutuallyExclusiveStudyCollectionUpdate:
      additionalProperties: false
      type: object
      properties:
        name:
          type: string
          description: Mutually exclusive study collection name
          example: My Mutually Exclusive Study Collection
        description:
          type: string
          description: A description of the study collection
          example: This is a description of my mutually exclusive study collection
        publish_at:
          type: string
          description: Datetime and timezone the study collection should be scheduled to be published at
          example: "2050-02-28T13:45:00 Europe/London"
          nullable: true
        study_ids:
          type: array
          description: List of study ids you wish to include in the collection. Note, this will overwrite the current list of studies in the collection
          items:
            type: string
            example: 5f7b9a7b5f7b9a7b5f7b9a7b
    MutuallyExclusiveStudyCollectionCreate:
      additionalProperties: false
      type: object
      required:
        - name
        - description
        - project_id
      properties:
        name:
          type: string
          description: Mutually exclusive study collection name
          example: My Mutually Exclusive Study Collection
        description:
          type: string
          description: A description of the study collection
          example: This is a description of my mutually exclusive study collection
        project_id:
          type: string
          description: Project id
          example: 5f7b9a7b5f7b9a7b5f7b9a7b
        study_ids:
          type: array
          description: List of study ids you wish to include in the collection
          items:
            type: string
            example: 5f7b9a7b5f7b9a7b5f7b9a7b
      allOf:
        - $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionUpdate"
    MutuallyExclusiveStudyCollectionList:
      additionalProperties: false
      type: object
      properties:
        id:
          type: string
          description: Mutually exclusive study collection id
          example: 6527ffc7fcc2e63a7a555488
        status:
          type: string
          description: Status of the study collection
          example: "ACTIVE"
          enum:
            - ACTIVE
            - PAUSED
            - UNPUBLISHED
            - PUBLISHING
            - AWAITING_REVIEW
            - SCHEDULED
      allOf:
        - $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionUpdate"
    MutuallyExclusiveStudyCollectionDetail:
      additionalProperties: false
      type: object
      properties:
        estimated_cost:
          type: string
          description: Estimated cost of the study collection
          example: "£0.00"
          nullable: true
        total_cost:
          type: string
          description: Estimated cost of the study collection
          example: "£0.00"
          nullable: true
      allOf:
        - $ref: "#/components/schemas/MutuallyExclusiveStudyCollectionList"
    BulkScreenOutRequest:
      type: object
      required:
        - submission_ids
        - bonus_per_submission
      properties:
        submission_ids:
          type: array
          description: List of submission ids to screen out, must belong to the study.
          items:
            type: string
            example: 5f7b9a7b5f7b9a7b5f7b9a7b
        bonus_per_submission:
          type: number
          description: The bonus amount to pay per submission, in your study currency. Minimum £0.10 or $0.14.
          example: 0.5
    StudyPredictedRecruitmentTime:
      additionalProperties: true
      type: object
      properties:
        precise_recruitment_time_hours:
          type: number
          description: The predicted recruitment time in hours
          example: 2.13
        lower_bound_hours:
          type: number
          description: The lower bound of the predicted recruitment time in hours
          example: 1.5
        upper_bound_hours:
          type: number
          description: The upper bound of the predicted recruitment time in hours
          example: 2.5
        display_string:
          type: string
          description: A human-readable string representing the predicted recruitment time
          example: "1 hour 23 minutes"
        limit_at:
          type: number
          description: |-
            The limit at which the accuracy of the prediction becomes unstable.
            This should be used when rendering the recruitment times in a GUI. For example if the limit_at is 10,
            and the predicted recruitment time is 12 hours, the display string should be "10 hours+". This
            has been done for you in the display_string field.

  securitySchemes:
    token:
      type: apiKey
      description: |-
        The Prolific API uses API token to authenticate requests. You can create an API token directly from your settings.

        Your API token does not have an expiry date and carries full permission, so be sure to keep them secure.

        If your token is leaked, delete it and create a new one directly in the app.

        In your requests add `Authorization` header with the value `Token <your token>`.

      name: Authorization
      in: header
